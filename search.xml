<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS上搭建GitLab的详细过程</title>
    <url>/posts/2.html</url>
    <content><![CDATA[<h2 id="Git的优点和缺点介绍"><a href="#Git的优点和缺点介绍" class="headerlink" title="Git的优点和缺点介绍"></a>Git的优点和缺点介绍</h2><h3 id="Git优点"><a href="#Git优点" class="headerlink" title="Git优点"></a>Git优点</h3><ul>
<li>1、适合分布式开发，强调个体</li>
<li>2、公共服务器压力和数据量都不会太大</li>
<li>3、速度快、灵活</li>
<li>4、任意两个开发者之间可以很容易的解决冲突</li>
<li>5、离线可以正常提交代码和工作</li>
</ul>
<h3 id="Git缺点"><a href="#Git缺点" class="headerlink" title="Git缺点"></a>Git缺点</h3><ul>
<li>1、学习周期相对而言比较长</li>
<li>2、不符合常规思维</li>
<li>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息</li>
</ul>
<h2 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h2><p>操作系统： CentOS 8 （搞清楚自己的环境，如果不知道 请输入以下命令）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CentOS:<span class="comment">#  cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 8.1.1911 (Core)</span><br></pre></td></tr></table></figure>
<p>Ubuntu 系统命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ubuntu:<span class="comment"># lsb_release -a</span></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 18.04</span><br></pre></td></tr></table></figure>

<h3 id="1-安装依赖包："><a href="#1-安装依赖包：" class="headerlink" title="1.安装依赖包："></a>1.安装依赖包：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dnf install curl openssh-server ca-certificates postfix</span><br><span class="line"><span class="comment"># Ubuntu 命令为 apt</span></span><br></pre></td></tr></table></figure>

<p>注：执行完成后，出现邮件配置，选择Internet那一项（不带Smarthost的）,选择完后，后面的东西，随便填吧，没啥卵用~</p>
<h3 id="2-修改镜像源地址"><a href="#2-修改镜像源地址" class="headerlink" title="2.修改镜像源地址"></a>2.修改镜像源地址</h3><p>常用的国内源地址</p>
<ul>
<li>阿里源： <a href="http://mirrors.aliyun.com/" title="阿里云源">http://mirrors.aliyun.com/</a></li>
<li>清华大学：<a href="https://mirrors.tuna.tsinghua.edu.cn/" title="清华大学源">https://mirrors.tuna.tsinghua.edu.cn/</a></li>
<li>中科大：<a href="https://mirrors.ustc.edu.cn/" title="中科大源">https://mirrors.ustc.edu.cn/</a></li>
</ul>
<p>我们利用清华大学的镜像</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</span><br></pre></td></tr></table></figure>
<p>来进行主程序的安装。首先信任 GitLab 的 GPG 公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br><span class="line"><span class="comment"># 查看修改源地址</span></span><br><span class="line">sudo  vi /etc/yum.repos.d/gitlab_gitlab-ee.repo</span><br><span class="line">[gitlab_gitlab-ee]</span><br><span class="line">name=gitlab_gitlab-ee</span><br><span class="line">baseurl=https://packages.gitlab.com/gitlab/gitlab-ee/el/8/<span class="variable">$basearch</span></span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey</span><br><span class="line">       https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey/gitlab-gitlab-ee-3D645A26AB9FBD22.pub.gpg</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[gitlab_gitlab-ee-source]</span><br><span class="line">name=gitlab_gitlab-ee-source</span><br><span class="line">baseurl=https://packages.gitlab.com/gitlab/gitlab-ee/el/8/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey</span><br><span class="line">       https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey/gitlab-gitlab-ee-3D645A26AB9FBD22.pub.gpg</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure>

<p>安装 gitlab-ce:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dnf update</span><br><span class="line">sudo dnf install gitlab-ce</span><br></pre></td></tr></table></figure>

<p>注： 有点慢 耐心等吧~<br>修改配置 ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改 external_url</span></span><br><span class="line">external_url =http://192.168.1.10 <span class="comment"># (IP换成你本机的IP地址)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-启动sshd和postfix服务"><a href="#3-启动sshd和postfix服务" class="headerlink" title="3.启动sshd和postfix服务"></a>3.启动sshd和postfix服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>

<h3 id="4-添加防火墙规则"><a href="#4-添加防火墙规则" class="headerlink" title="4.添加防火墙规则"></a>4.添加防火墙规则</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="5-启动各项服务"><a href="#5-启动各项服务" class="headerlink" title="5.启动各项服务"></a>5.启动各项服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>有点慢，须要稍等下。</p>
<p>上面这一步可能会失败，报错如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ERROR: user[git] (gitlab&#x27;&#x27;users line 34) ......</span><br></pre></td></tr></table></figure>

<p>解决办法：进入到文件： &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb，找到下面他们俩：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user[‘username’]=’git’</span><br><span class="line">User[‘group’]=’git’</span><br><span class="line"><span class="comment"># 讲git改为gitlab。然后初始化配置</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>这时又报错，查了下说是至少大于等于2G CPU运行内存，修改内存后解决</p>
<h3 id="6-查看安装是否成功"><a href="#6-查看安装是否成功" class="headerlink" title="6.查看安装是否成功"></a>6.查看安装是否成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl status</span><br></pre></td></tr></table></figure>

<p>出现一下画面就OK了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl status</span><br><span class="line">run: alertmanager: (pid 22060) 15s; run: <span class="built_in">log</span>: (pid 22146) 15s</span><br><span class="line">run: gitaly: (pid 21990) 17s; run: <span class="built_in">log</span>: (pid 22003) 16s</span><br><span class="line">run: gitlab-monitor: (pid 22026) 16s; run: <span class="built_in">log</span>: (pid 22030) 16s</span><br><span class="line">run: gitlab-workhorse: (pid 21973) 17s; run: <span class="built_in">log</span>: (pid 21981) 17s</span><br><span class="line">run: logrotate: (pid 21526) 64s; run: <span class="built_in">log</span>: (pid 21983) 17s</span><br><span class="line">run: nginx: (pid 21498) 66s; run: <span class="built_in">log</span>: (pid 21982) 17s</span><br><span class="line">run: node-exporter: (pid 21753) 52s; run: <span class="built_in">log</span>: (pid 22004) 16s</span><br><span class="line">run: postgres-exporter: (pid 22153) 15s; run: <span class="built_in">log</span>: (pid 22161) 14s</span><br><span class="line">run: postgresql: (pid 21187) 201s; run: <span class="built_in">log</span>: (pid 21964) 17s</span><br><span class="line">run: prometheus: (pid 22039) 15s; run: <span class="built_in">log</span>: (pid 22053) 15s</span><br><span class="line">run: redis: (pid 21117) 207s; run: <span class="built_in">log</span>: (pid 21963) 17s</span><br><span class="line">run: redis-exporter: (pid 21791) 44s; run: <span class="built_in">log</span>: (pid 22031) 16s</span><br><span class="line">run: sidekiq: (pid 21465) 73s; run: <span class="built_in">log</span>: (pid 21966) 17s</span><br><span class="line">run: unicorn: (pid 21428) 79s; run: <span class="built_in">log</span>: (pid 21965) 17s</span><br></pre></td></tr></table></figure>

<p>登陆地址 ，就是刚才你刚才添加到配置文件的那个地址登陆访问（无需输入端口）：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">http://192.168.1.10</span><br></pre></td></tr></table></figure>

<p>上来先让你初始化密码，剩下的就是界面画操作。 (帐号密码在上面gitlab.rb中有设置)<br>安装到此结束~</p>
<p>注：gitlab在服务器中的默认代码存放的位置是 &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data&#x2F;repositories</p>
]]></content>
      <categories>
        <category>环境部署</category>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo版本升级指南</title>
    <url>/posts/15ac.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>更换了新主题，在hexo g和hexo s的时候总会报如下错误，在主题github issues逛了一圈后，感觉应该是我的hexo版本太老了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜ hexo s</span><br><span class="line">(node:64285) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: layout/archive.ejs</span><br><span class="line">SyntaxError: Invalid or unexpected token in &quot;/Users/lanvnal/Files/blog/themes/hexo-theme-matery/layout/archive.ejs&quot;</span><br><span class="line">    at new Function (&lt;anonymous&gt;)</span><br><span class="line">    at Object.exports.compile (/Users/lanvnal/Files/blog/node_modules/ejs/lib/ejs.js:242:14)</span><br><span class="line">    at Function.ejsRenderer.compile (/Users/lanvnal/Files/blog/node_modules/hexo-renderer-ejs/lib/renderer.js:11:14)</span><br><span class="line">    at Theme._View.View.View._precompile (/Users/lanvnal/Files/blog/node_modules/hexo/lib/theme/view.js:117:31)</span><br></pre></td></tr></table></figure>

<p>决定升级hexo版本，但是没找到很明确的升级hexo的文章，遂做一下记录。</p>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>1、全局升级hexo-cli，先<code>hexo version</code>查看当前版本，然后<code>npm i hexo-cli -g</code>，再次<code>hexo version</code>查看是否升级成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">npm update</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure>



<p>2、使用<code>npm install -g npm-check</code>和<code>npm-check</code>，检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check</span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure>



<p>3、使用<code>npm install -g npm-upgrade</code>和<code>npm-upgrade</code>，升级系统中的插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure>

<p>4、使用<code>npm update -g</code>和<code>npm update --save</code></p>
<p>更新全局包与更新生产环境依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update &lt;name&gt; -g</span><br><span class="line"></span><br><span class="line">npm update &lt;name&gt; --save</span><br></pre></td></tr></table></figure>

<p>save参数：<code>npm install X –save</code>:</p>
<ul>
<li><p>会把X包安装到<code>node_modules</code>目录中</p>
</li>
<li><p>会在<code>package.json</code>的dependencies属性下添加X</p>
</li>
<li><p>之后运行<code>npm install</code>命令时，会自动安装X到node_modules目录中</p>
</li>
</ul>
<p>如果不加save参数的话，之后把X包安装到node_modules目录中，不会添加到dependencies文件中。再查看hexo文件夹下面的dependencies文件,可以看到hexo的版本已经更新了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;3.7.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^3.7.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-fs&quot;</span>: <span class="string">&quot;^0.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^0.1.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^0.1.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^0.2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^0.3.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^0.3.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^0.3.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>PS：第四步遇到了错误，错误提示如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">fsevents@1.2.11 install /Users/lanvnal/Files/blog/node_modules/hexo/node_modules/fsevents</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">node-gyp rebuild</span></span><br><span class="line"></span><br><span class="line">xcode-select: error: tool &#x27;xcodebuild&#x27; requires Xcode, but active developer directory &#x27;/Library/Developer/CommandLineTools&#x27; is a command line tools instance</span><br><span class="line"></span><br><span class="line">xcode-select: error: tool &#x27;xcodebuild&#x27; requires Xcode, but active developer directory &#x27;/Library/Developer/CommandLineTools&#x27; is a command line tools instance</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.CLTools_Executables&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLILeo&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLI&#x27; found at &#x27;/&#x27;.</span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br></pre></td></tr></table></figure>

<p>其实已经安装过了xcode cli，但是这里还是报错了，估计和苹果新系统有关，重装就好了，操作如下：</p>
<p>如果像以前一样执行<code>xcode-select --install</code>会有如下报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcode-select: error: <span class="built_in">command</span> line tools are already installed, use <span class="string">&quot;Software Update&quot;</span> to install updates</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /Library/Developer/CommandLineTools</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<p>然后再执行第四步，完美升级。</p>
]]></content>
      <categories>
        <category>网站优化</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux iostat命令详解</title>
    <url>/posts/3.html</url>
    <content><![CDATA[<p>iostat是I&#x2F;O statistics（输入&#x2F;输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析</p>
<h2 id="常见命令展示"><a href="#常见命令展示" class="headerlink" title="常见命令展示"></a>常见命令展示</h2><h3 id="iostat-安装"><a href="#iostat-安装" class="headerlink" title="iostat 安装"></a>iostat 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iostat属于sysstat软件包。可以直接安装。</span></span><br><span class="line">yum install sysstat</span><br></pre></td></tr></table></figure>

<h3 id="显示所有设备负载情况"><a href="#显示所有设备负载情况" class="headerlink" title="显示所有设备负载情况"></a>显示所有设备负载情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@i-003F281E ~]<span class="comment"># iostat</span></span><br><span class="line">Linux 3.10.0-1062.4.1.el7.x86_64 (i-003F281E) 	2020年03月05日 	_x86_64_	(4 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %<span class="built_in">nice</span> %system %iowait  %steal   %idle</span><br><span class="line">           1.65    0.00    0.58    0.38    0.01   97.38</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">vda              10.84       126.28      1034.29     317347    2599151</span><br><span class="line">dm-0             11.81       120.22      1011.98     302106    2543083</span><br><span class="line">dm-1              0.05         1.29         0.00       3236          0</span><br><span class="line">dm-2              0.03         0.43         0.81       1090       2048</span><br></pre></td></tr></table></figure>

<p>cpu属性值说明：</p>
<p>%user：CPU处在用户模式下的时间百分比。</p>
<p>%nice：CPU处在带NICE值的用户模式下的时间百分比。</p>
<p>%system：CPU处在系统模式下的时间百分比。</p>
<p>%iowait：CPU等待输入输出完成时间的百分比。</p>
<p>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</p>
<p>%idle：CPU空闲时间百分比。</p>
<p>备注：</p>
<p>如果%iowait的值过高，表示硬盘存在I&#x2F;O瓶颈</p>
<p>如果%idle值高，表示CPU较空闲</p>
<p>如果%idle值高但系统响应慢时，可能是CPU等待分配内存，应加大内存容量。</p>
<p>如果%idle值持续低于10，表明CPU处理能力相对较低，系统中最需要解决的资源是CPU。</p>
<p>cpu属性值说明:</p>
<p>tps：该设备每秒的传输次数</p>
<p>kB_read&#x2F;s：每秒从设备（drive expressed）读取的数据量；</p>
<p>kB_wrtn&#x2F;s：每秒向设备（drive expressed）写入的数据量；</p>
<p>kB_read：  读取的总数据量；</p>
<p>kB_wrtn：写入的总数量数据量；</p>
<h3 id="定时显示所有信息"><a href="#定时显示所有信息" class="headerlink" title="定时显示所有信息"></a>定时显示所有信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#【每隔2秒刷新显示，且显示3次】</span></span><br><span class="line">iostat 2  3</span><br></pre></td></tr></table></figure>

<h3 id="显示指定磁盘信息"><a href="#显示指定磁盘信息" class="headerlink" title="显示指定磁盘信息"></a>显示指定磁盘信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iostat -d /dev/sda</span><br></pre></td></tr></table></figure>

<h3 id="显示tty和Cpu信息"><a href="#显示tty和Cpu信息" class="headerlink" title="显示tty和Cpu信息"></a>显示tty和Cpu信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iostat -t</span><br></pre></td></tr></table></figure>

<h3 id="以M为单位显示所有信息"><a href="#以M为单位显示所有信息" class="headerlink" title="以M为单位显示所有信息"></a>以M为单位显示所有信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iostat -m</span><br></pre></td></tr></table></figure>

<h3 id="查看设备使用率（-util）、响应时间（await）"><a href="#查看设备使用率（-util）、响应时间（await）" class="headerlink" title="查看设备使用率（%util）、响应时间（await）"></a>查看设备使用率（%util）、响应时间（await）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  【-d 显示磁盘使用情况，-x 显示详细信息】</span></span><br><span class="line"><span class="comment">#  d: detail</span></span><br><span class="line">iostat -d -x -k 1 1</span><br><span class="line"></span><br><span class="line">[root@i-003F281E ~]<span class="comment"># iostat -d -x -k 1 1</span></span><br><span class="line">Linux 3.10.0-1062.4.1.el7.x86_64 (i-003F281E) 	2020年03月05日 	_x86_64_	(4 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">vda               0.01     1.86    4.47    6.09   123.00  1007.42   214.01     0.70   92.65    5.20  156.86   2.58   2.72</span><br><span class="line">dm-0              0.00     0.00    4.21    7.31   117.09   985.69   191.59     1.30  112.62    5.71  174.19   2.33   2.68</span><br><span class="line">dm-1              0.00     0.00    0.05    0.00     1.25     0.00    50.96     0.00    1.35    1.35    0.00   0.96   0.00</span><br><span class="line">dm-2              0.00     0.00    0.03    0.00     0.42     0.79    72.98     0.00   10.29    2.84  131.00   3.81   0.01</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>rrqm&#x2F;s：  每秒进行 merge 的读操作数目.即 delta(rmerge)&#x2F;s</p>
<p>wrqm&#x2F;s： 每秒进行 merge 的写操作数目.即 delta(wmerge)&#x2F;s</p>
<p>%util： 一秒中有百分之多少的时间用于 I&#x2F;O</p>
<p>如果%util接近100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷</p>
<p>   idle小于70% IO压力就较大了，一般读取速度有较多的wait。</p>
<h3 id="查看cpu状态"><a href="#查看cpu状态" class="headerlink" title="查看cpu状态"></a>查看cpu状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iostat -c 1 1</span><br><span class="line"></span><br><span class="line">[root@i-003F281E ~]<span class="comment"># iostat -c 1 1</span></span><br><span class="line">Linux 3.10.0-1062.4.1.el7.x86_64 (i-003F281E) 	2020年03月05日 	_x86_64_	(4 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %<span class="built_in">nice</span> %system %iowait  %steal   %idle</span><br><span class="line">           1.57    0.00    0.55    0.36    0.01   97.51</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>iostat</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Sublime Text 3写Markdown</title>
    <url>/posts/1.html</url>
    <content><![CDATA[<h2 id="首先介绍几个Markdown语法说明"><a href="#首先介绍几个Markdown语法说明" class="headerlink" title="首先介绍几个Markdown语法说明"></a>首先介绍几个Markdown语法说明</h2><ul>
<li>1：Markdown 语法说明（详解版）</li>
<li>2：Markdown 语法说明 (简体中文版)</li>
<li>3：GitHub 风格的 Markdown 语法</li>
<li>4：GitHub 上的书写方式</li>
</ul>
<p>目前Sublime Text 3已经支持高亮显示原始Markdown和MultiMarkdown语法，如果不需要预览功能或是GitHub Flavored Markdown支持，可以直接使用。</p>
<p>安装中需要使用Package Control，没有安装的可以看这边。</p>
<h2 id="安装Markdown-Preview-插件"><a href="#安装Markdown-Preview-插件" class="headerlink" title="安装Markdown Preview 插件"></a>安装Markdown Preview 插件</h2><p>Mardown Preview不仅支持在浏览器中预览markdown文件，还可以导出html代码。下面我们通过Package Control安装。</p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>通过按组合键Ctrl+Shift+P或是点击Preference-&gt;Package Control调出命令面板，然后再输入 install，选择 Package Control: install package。</p>
<p><img src="/medias/sublime/sublime-install.png" alt="install package"></p>
<p>在插件安装面板输入markdown找到Markdown Preview并点击安装即可。</p>
<p><img src="/medias/sublime/sublime-markdown.png" alt="install markdown" title="安装MarkdownPreview"></p>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>通过按组合键Ctrl+Shift+P或是点击Preference-&gt;Package Control调出命令面板，输入mdp，下图中红框圈出的就是在浏览器中预览markdown文件。</p>
<p><img src="/medias/sublime/sublime-mdp.png" alt="运行 markdown" title="运行MarkdownPreview"></p>
<p>选中后，你将见到两个选项：GitHub和Mardown。GitHub选项意味着使用GitHub的在线API来解析.md文件。它的解析速度取决于你的联网速度。据称有每天60次访问的限制。[2]但能免费获得GFM格式的语法支持和EMOJI表情的支持。</p>
<p>另外一个常用功能是图中第五个，Export HTML in Sublime Text，即导出html文件到sublime text。</p>
<h3 id="3-快捷键设置"><a href="#3-快捷键设置" class="headerlink" title="3.快捷键设置"></a>3.快捷键设置</h3><p>Sublime Text支持自定义快捷键，markdown preview默认没有快捷键，我们可以自己为preview in browser设置快捷键。方法是在Preferences -&gt; Key Bindings User打开的文件的中括号中添加以下代码(可在Key Bindings Default找到格式)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;keys&quot;</span>: [<span class="string">&quot;alt+m&quot;</span>], <span class="string">&quot;command&quot;</span>: <span class="string">&quot;markdown_preview&quot;</span>, <span class="string">&quot;args&quot;</span>: &#123;<span class="string">&quot;target&quot;</span>: <span class="string">&quot;browser&quot;</span>, <span class="string">&quot;parser&quot;</span>:<span class="string">&quot;markdown&quot;</span>&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>这里：<br>“alt+m”可设置为自己喜欢的按键。<br>“parser”:”markdown”也可设置为”parser”:”github”，改为使用Github在线API解析markdown。</p>
<h3 id="4-设置语法高亮和mathjax支持"><a href="#4-设置语法高亮和mathjax支持" class="headerlink" title="4.设置语法高亮和mathjax支持"></a>4.设置语法高亮和mathjax支持</h3><p>语法高亮跟编辑器的主题有关，可以在Preferences -&gt;Color Scheme找自己喜欢的主题。</p>
<p>关于目录生成，只要文章是按照markdown语法写作的。在需要生成目录的地方写[TOC]即可。</p>
<p>设置mathjax支持需要在Preferences -&gt;Package Settings-&gt;Markdown Preview-&gt;Setting User中增加如下代码[5]：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    /*</span><br><span class="line">        Enable or not mathjax support.</span><br><span class="line">    */</span><br><span class="line">    <span class="string">&quot;enable_mathjax&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">        Enable or not highlight.js support <span class="keyword">for</span> syntax highlighting.</span><br><span class="line">    */</span><br><span class="line">    <span class="string">&quot;enable_highlight&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印成pdf"><a href="#打印成pdf" class="headerlink" title="打印成pdf"></a>打印成pdf</h3><p>将markdown转换为pdf应该有很多种方法的。可直接用谷歌浏览器虚拟打印功能生成。[3]<br>利用Markdown Preview的Preview in Browser功能可以在浏览器上看到htm效果。在页面右键-&gt;打印-&gt;另存为pdf-&gt;调节页边距即可将pdf文件下载下来。</p>
<h2 id="安装使用Markdown-Editing"><a href="#安装使用Markdown-Editing" class="headerlink" title="安装使用Markdown Editing"></a>安装使用Markdown Editing</h2><p>Github项目地址：SublimeText-Markdown&#x2F;MarkdownEditing</p>
<h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h3><p>如果Sublime安装了Package Control,直接使用组合键Command+Shift+P调出命令面板，输入 “package install” 从列表中选择 “install Package” 然后回车。再输入MarkdownEditing，找到后点击即可自行安装，重启便可使用。</p>
<h3 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h3><p>除了高亮显示语法，MarkdownEditing 还提供了一些快捷键用于快速插入markdown 标记。引用6中有比较详细的使用方式，这里仅作简要介绍。<br>常用的(更多的快捷键请参阅其官方文档)有：</p>
<p>插入链接：Ctrl + Win + K<br>插入图片：Shift + Win + K</p>
<h3 id="3-code-snippet"><a href="#3-code-snippet" class="headerlink" title="3.code snippet"></a>3.code snippet</h3><p>输入 “mdi + tab” 会自动插入下面的图片标记</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg <span class="string">&quot;Optional title&quot;</span>)</span><br><span class="line"></span><br><span class="line">![图片alt](图片地址 <span class="string">&#x27;&#x27;</span>图片title<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>输入 “mdl + tab” 会自动生成下面的链接标记</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[](<span class="built_in">link</span>)</span><br><span class="line"></span><br><span class="line">[超链接名](超链接地址 <span class="string">&quot;超链接title&quot;</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<h2 id="另外的插件：OmniMarkupPreviewer"><a href="#另外的插件：OmniMarkupPreviewer" class="headerlink" title="另外的插件：OmniMarkupPreviewer"></a>另外的插件：OmniMarkupPreviewer</h2><p>这个插件貌似功能很强大，用于markdown这是其中的一种功能。因为上两种插件已经够用，就不再研究它了，仅仅Mark下。</p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis6.0.10编译安装配置</title>
    <url>/posts/1c3a.html</url>
    <content><![CDATA[<h3 id="0x01-下载Redis"><a href="#0x01-下载Redis" class="headerlink" title="0x01 下载Redis"></a>0x01 下载Redis</h3><p>直接登录官网下载你需要的版本<a href="https://redis.io/">https://redis.io/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装编译依赖gc++</span></span><br><span class="line">$ sudo yum install gcc-c++</span><br><span class="line"><span class="comment">#下载、编译、安装redis</span></span><br><span class="line">$ wget http://download.redis.io/releases/redis-6.0.10.tar.gz</span><br><span class="line">$ tar xzf redis-6.0.10.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-6.0.10</span><br></pre></td></tr></table></figure>
<h3 id="0x02-安装编译"><a href="#0x02-安装编译" class="headerlink" title="0x02 安装编译"></a>0x02 安装编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/redis</span><br><span class="line"><span class="comment">#编译包并安装到指定目录</span></span><br><span class="line">$ make PREFIX=/usr/local/redis install</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">$ src/redis-server</span><br><span class="line"><span class="comment">#运行shell 及 基本操作</span></span><br><span class="line">$ src/redis-cli</span><br><span class="line">redis&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br></pre></td></tr></table></figure>

<p>编译后文件</p>
<p>redis-benchmark（压力测试工具）、redis-check-aof（检查.aof文件完整性的工具）、redis-check-rdb（检查数据文件完整性的工具）、redis-sentinel（监控集群运行状态）、redis-server（服务端）、redis-cli（客户端）</p>
<h3 id="0x03-编译出错"><a href="#0x03-编译出错" class="headerlink" title="0x03 编译出错"></a>0x03 编译出错</h3><p><img src="/medias/redis-error.png" alt="编译出错"></p>
<p>这时我们需要检查 gcc 版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure>

<p>配置scl源，升级版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##安装scl源，修改官方源地址</span></span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">vim CentOS-SCLo-scl-rh.repo</span><br><span class="line">vim CentOS-SCLo-scl.repo</span><br><span class="line"><span class="comment">##安装新版gcc</span></span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"><span class="comment">##永久生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br><span class="line">yum install tcl -y</span><br></pre></td></tr></table></figure>

<h3 id="0x04-修改配置文件"><a href="#0x04-修改配置文件" class="headerlink" title="0x04 修改配置文件"></a>0x04 修改配置文件</h3><p>编辑”&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;redis”文件，做以下几处修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi redis.conf</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 90 10</span></span><br><span class="line"><span class="comment"># description: Start And Stop Redis</span></span><br><span class="line"></span><br><span class="line">protected-mode no <span class="comment"># 关闭保护模式,不然远程还是连接不了</span></span><br><span class="line">daemonize <span class="built_in">yes</span>     <span class="comment"># 守护进程模式开启,设为后台运行</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1    <span class="comment"># 绑定IP按需修改</span></span><br><span class="line">port 6379         <span class="comment"># 端口按需修改</span></span><br></pre></td></tr></table></figure>

<p>启动 Redis服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis/bin/</span><br><span class="line">./redis-server /usr/local/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>查看监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>

<p>启动Redis客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hello word</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line"><span class="string">&quot;word&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>关闭Redis服务 查看监听已经关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli shutdown</span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>

<p>设置开机自动启动Redis服务。首先复制启动脚本到资源目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /root/redis-6.0.10/utils/redis_init_script /etc/rc.d/init.d/redis</span><br></pre></td></tr></table></figure>

<p>修改启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 /etc/rc.d/init.d/redis</span><br><span class="line"><span class="comment">##然后将Redis服务加入到系统服务</span></span><br><span class="line">chkconfig --add redis</span><br><span class="line"><span class="comment">##最后检查Redis服务设置是否已经生效</span></span><br><span class="line">chkconfig --list redis</span><br></pre></td></tr></table></figure>

<p>现在就可以使用service命令来启动和停止Redis服务了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status redis.service</span><br><span class="line">systemctl start redis.service</span><br><span class="line">systemctl stop redis.service</span><br></pre></td></tr></table></figure>

<p>防火墙中放通端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment">##查看端口是否放通</span></span><br><span class="line">firewall-cmd --list-ports </span><br></pre></td></tr></table></figure>

<p>至此Redis安装完毕</p>
]]></content>
      <categories>
        <category>系统配置</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7双网卡绑定配置 bonding</title>
    <url>/posts/e3a7.html</url>
    <content><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>当linux系统上有多个单独网卡，又想充分利用这些网卡，同时对外提供一个统一的网络地址，以使得增大网络的吞吐量，同时也提高网络的可用性，这时就需要bond来帮助我们解决这个问题。</p>
<p>Linux网卡绑定mode共有七种(0~6) bond0、bond1、bond2、bond3、bond4、bond5、bond6，接下来我们一起简单看下这7中模式的工作原理概述。</p>
<h3 id="bond几种主要模式介绍"><a href="#bond几种主要模式介绍" class="headerlink" title="bond几种主要模式介绍"></a>bond几种主要模式介绍</h3><ul>
<li>第一种模式：mod&#x3D;0 ，即：(balance-rr) Round-robin policy（平衡抡循环策略）</li>
</ul>
<p>bond0工作原理：</p>
<p>传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降</p>
<blockquote>
<p>特点：有高可用 (容错) 和负载均衡的功能, 需要交换机的配置，每块网卡轮询发包 (流量分发比较均衡).</p>
</blockquote>
<ul>
<li>第二种模式：mod&#x3D;1，即： (active-backup) Active-backup policy（主-备份策略）</li>
</ul>
<p>bond1工作原理：</p>
<p>只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；由此可见此算法的优点是可以提供高网络连接的可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有N个网络接口的情况下，资源利用率为1&#x2F;N</p>
<blockquote>
<p>特点：只有高可用 (容错) 功能, 不需要交换机配置, 这种模式只有一块网卡工作, 对外只有一个mac地址。缺点是端口利用率比较低</p>
</blockquote>
<ul>
<li>第三种模式：mod&#x3D;2，即：(balance-xor) XOR policy（平衡策略）</li>
</ul>
<p>bond2工作原理：</p>
<p>基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力</p>
<blockquote>
<p>特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力，但不常用</p>
</blockquote>
<ul>
<li>第四种模式：mod&#x3D;3，即：broadcast（广播策略）</li>
</ul>
<p>bond3工作原理：</p>
<p>在每个slave接口上传输每个数据包，此模式提供了容错能力。</p>
<blockquote>
<p> 特点：在每个slave接口上传输每个数据包，此模式提供了容错能力，不常用</p>
</blockquote>
<ul>
<li>第五种模式：mod&#x3D;4，即：(802.3ad) IEEE 802.3ad Dynamic link aggregation（IEEE 802.3ad 动态链接聚合）</li>
</ul>
<p>bond4工作原理：</p>
<p>创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应性。</p>
<p><em>必要条件：</em></p>
<ul>
<li>条件1：ethtool支持获取每个slave的速率和双工设定</li>
<li>条件2：switch(交换机)支持IEEE 802.3ad Dynamic link aggregation</li>
<li>条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式</li>
</ul>
<blockquote>
<p>特点： IEEE 802.3ad 动态链路聚合，需要交换机支持与配置交换机</p>
</blockquote>
<ul>
<li>第六种模式：mod&#x3D;5，即：(balance-tlb) Adaptive transmit load balancing（适配器传输负载均衡）</li>
</ul>
<p>bond5工作原理：</p>
<p>不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。</p>
<p>该模式的必要条件：ethtool支持获取每个slave的速率</p>
<blockquote>
<p>特点：该模式的必要条件：ethtool支持获取每个slave的速率。不常用</p>
</blockquote>
<ul>
<li>第七种模式：mod&#x3D;6，即：(balance-alb) Adaptive load balancing（适配器适应性负载均衡）</li>
</ul>
<p>bond6工作原理：</p>
<p>该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receive load balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。</p>
<p>来自服务器端的接收流量也会被均衡。当本机发送ARP请求时，bonding驱动把对端的IP信息从ARP包中复制并保存下来。当ARP应答从对端到达时，bonding驱动把它的硬件地址提取出来，并发起一个ARP应答给bond中的某个slave。使用ARP协商进行负载均衡的一个问题是：每次广播ARP请求时都会使用bond的硬件地址，因此对端学习到这个硬件地址后，接收流量将会全部流向当前的slave。这个问题可以通过给所有的对端发送更新 （ARP应答）来解决，应答中包含他们独一无二的硬件地址，从而导致流量重新分布。当新的slave加入到bond中时，或者某个未激活的slave重新 激活时，接收流量也要重新分布。接收的负载被顺序地分布（round robin）在bond中最高速的slave上</p>
<p>当某个链路被重新接上，或者一个新的slave加入到bond中，接收流量在所有当前激活的slave中全部重新分配，通过使用指定的MAC地址给每个 client发起ARP应答。</p>
<p>下面介绍的updelay参数必须被设置为某个大于等于switch(交换机)转发延时的值，从而保证发往对端的ARP应答不会被switch(交换机)阻截。</p>
<p><em>必要条件：</em></p>
<ul>
<li>条件1：ethtool支持获取每个slave的速率；</li>
<li>条件2：底层驱动支持设置某个设备的硬件地址，从而使得总是有个slave(curr_active_slave)使用bond的硬件地址，同时保证每个bond 中的slave都有一个唯一的硬件地址。如果curr_active_slave出故障，它的硬件地址将会被新选出来的 curr_active_slave接管</li>
</ul>
<p>其实mod&#x3D;6与mod&#x3D;0的区别：mod&#x3D;6，先把eth0流量占满，再占eth1，….ethX；而mod&#x3D;0的话，会发现2个口的流量都很稳定，基本一样的带宽。而mod&#x3D;6，会发现第一个口流量很高，第2个口只占了小部分流量。</p>
<blockquote>
<p>特点：有高可用 ( 容错 )和负载均衡的功能，不需要交换机配置 (流量分发到每个接口不是特别均衡)<br>服务器上两张物理网卡em1和em2, 通过绑定成一个逻辑网卡bond0。</p>
</blockquote>
<p>注: ip地址配置在bond0上, 物理网卡不需要配置ip地址。</p>
<h2 id="0x02-手动配置bond"><a href="#0x02-手动配置bond" class="headerlink" title="0x02 手动配置bond"></a>0x02 手动配置bond</h2><h3 id="关闭和停止NetworkManager服务"><a href="#关闭和停止NetworkManager服务" class="headerlink" title="关闭和停止NetworkManager服务"></a>关闭和停止NetworkManager服务</h3><p>一定要关闭，不关会对做bonding有干扰</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager.service</span><br><span class="line"><span class="comment"># 停止NetworkManager服务</span></span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager.service</span><br><span class="line"><span class="comment"># 禁止开机启动NetworkManager服务</span></span><br></pre></td></tr></table></figure>

<h3 id="加载bonding模块"><a href="#加载bonding模块" class="headerlink" title="加载bonding模块"></a>加载bonding模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe --first-time bonding</span><br></pre></td></tr></table></figure>

<p>没有提示说明加载成功, 如果出现 modprobe: ERROR: could not insert ‘bonding’: Module already in kernel 说明你已经加载了这个模块, 就不用管了</p>
<p>你也可以使用<code>lsmod | grep bonding</code>查看模块是否被加载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep bonding</span><br><span class="line">bonding 136705 0</span><br></pre></td></tr></table></figure>

<h3 id="创建基于bond0接口的配置文件"><a href="#创建基于bond0接口的配置文件" class="headerlink" title="创建基于bond0接口的配置文件"></a>创建基于bond0接口的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class="line"><span class="comment">#修改成如下，根据你的情况:</span></span><br><span class="line">DEVICE=bond0</span><br><span class="line">TYPE=Bond</span><br><span class="line">IPADDR=172.16.0.183</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.0.1</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">USERCTL=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">BONDING_MASTER=<span class="built_in">yes</span></span><br><span class="line">BONDING_OPTS=<span class="string">&quot;miimon=100 mode=4 xmit_hash_policy=layer3+4&quot;</span></span><br><span class="line"><span class="comment">#上面这个参数如已配置mode在系统文件中可注释</span></span><br></pre></td></tr></table></figure>

<h3 id="将需求mode配置在系统文件中"><a href="#将需求mode配置在系统文件中" class="headerlink" title="将需求mode配置在系统文件中"></a>将需求mode配置在系统文件中</h3><p>如在bond0接口上已配置不再须要配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/modprobe.d/bond.conf</span><br><span class="line"><span class="comment">#添加以下内容：</span></span><br><span class="line"><span class="built_in">alias</span> bond0 bonding</span><br><span class="line">options bond0 miimon=100 mode=4 xmit_hash_policy=layer3+4</span><br></pre></td></tr></table></figure>

<h3 id="修改em1接口的配置文件"><a href="#修改em1接口的配置文件" class="headerlink" title="修改em1接口的配置文件"></a>修改em1接口的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-em1</span><br><span class="line"><span class="comment">#修改成如下:</span></span><br><span class="line">DEVICE=em1</span><br><span class="line">USERCTL=no</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond0</span><br><span class="line"><span class="comment"># 需要和上面的ifcfg-bond0配置文件中的DEVICE的值对应</span></span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>

<h3 id="修改em2接口的配置文件"><a href="#修改em2接口的配置文件" class="headerlink" title="修改em2接口的配置文件"></a>修改em2接口的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-em2</span><br><span class="line"><span class="comment">#修改成如下:</span></span><br><span class="line">DEVICE=em2</span><br><span class="line">USERCTL=no</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond0</span><br><span class="line"><span class="comment"># 与 ifcfg-bond0 配置文件中的DEVICE的值对应</span></span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure>

<h2 id="0x03-nmcli命令配置"><a href="#0x03-nmcli命令配置" class="headerlink" title="0x03 nmcli命令配置"></a>0x03 nmcli命令配置</h2><p>使用 nmcli 命令配置时需要启动 NetworkManager 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##查看网卡信息</span></span><br><span class="line">nmcli connection show</span><br><span class="line"><span class="comment">##配置bond0链路聚合为主从模式</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond con-name bond0 ifname bond0 bond.options <span class="string">&quot;mode=active-backup,miimon=100&quot;</span></span><br><span class="line"><span class="comment">##配置bond0网卡地址</span></span><br><span class="line">nmcli connection modify bond0 ipv4.method manual ipv4.addresses <span class="string">&#x27;172.16.0.183/24&#x27;</span> ipv4.gateway <span class="string">&#x27;172.16.0.254&#x27;</span></span><br><span class="line"><span class="comment">##刷新网络</span></span><br><span class="line">nmcli connection reload</span><br><span class="line"><span class="comment">##添加网络到绑定网络，其中 enp3s0f0 按情况变更</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname enp3s0f0 master bond0</span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname enp3s0f1 master bond0</span><br><span class="line"><span class="comment">##启动网络</span></span><br><span class="line">nmcli connection up  bond0</span><br></pre></td></tr></table></figure>

<h2 id="0x04-测试"><a href="#0x04-测试" class="headerlink" title="0x04 测试"></a>0x04 测试</h2><p>重启网络服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">#查看网络是否正常，其中bond0接口mac地址与em1等接口相同</span></span><br><span class="line">ifconfig em1 down</span><br><span class="line"><span class="comment">#关闭一个接口查看网络是否正常</span></span><br><span class="line"><span class="built_in">cat</span> /proc/net/bonding/bond0</span><br><span class="line"><span class="comment">#查看网卡状态</span></span><br><span class="line">ethtool bond0</span><br><span class="line"><span class="comment">#查看速率命令</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统配置</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS编译安装配置MariaDB数据库</title>
    <url>/posts/ed21.html</url>
    <content><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>操作系统：CentOS 7<br>MariaDB版本：mariadb-5.5.33a<br>MariaDB数据库存储目录：&#x2F;data&#x2F;mysql</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="1、安装系统"><a href="#1、安装系统" class="headerlink" title="1、安装系统"></a>1、安装系统</h3><p>略</p>
<h3 id="2、配置网络"><a href="#2、配置网络" class="headerlink" title="2、配置网络"></a>2、配置网络</h3><p>略</p>
<h3 id="3、配置防火墙"><a href="#3、配置防火墙" class="headerlink" title="3、配置防火墙"></a>3、配置防火墙</h3><p>开启 3306 端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#iptables防火墙配置</span></span><br><span class="line">vi /etc/sysconfig/iptables</span><br><span class="line"><span class="comment">#允许所有IP经过3306端口通过防火墙</span></span><br><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br><span class="line"><span class="comment">#很多网友把这两条规则添加到防火墙配置的最后一行，导致防火墙启动失败，正确的应该是添加到默认的22端口这条规则的下面</span></span><br><span class="line"><span class="comment">#配置完后须要重启使防火墙生效</span></span><br><span class="line">/etc/init.d/iptables restart</span><br><span class="line"><span class="comment">#firewalld防火墙配置</span></span><br><span class="line"><span class="comment">#检查防火墙是否启用,及开通的端口</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment">#放通 3306端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=3306/tcp</span><br><span class="line"><span class="comment">#放通 10.248.0.0/28位访问 3306端口</span></span><br><span class="line">firewall-cmd --permanent --add-rich-rule=<span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.248.0.0/28&quot;  port port=3306 protocol=tcp accept&#x27;</span></span><br><span class="line"><span class="comment">#重新载入防火墙配置使用配置生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="4、关闭-SELINUX"><a href="#4、关闭-SELINUX" class="headerlink" title="4、关闭 SELINUX"></a>4、关闭 SELINUX</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="comment">#SELINUX=enforcing #注释掉</span></span><br><span class="line"><span class="comment">#SELINUXTYPE=targeted #注释掉</span></span><br><span class="line">SELINUX=disabled <span class="comment">#增加</span></span><br><span class="line">:wq!  <span class="comment">#保存退出</span></span><br><span class="line">shutdown -r now <span class="comment">#重启系统</span></span><br></pre></td></tr></table></figure>

<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="规划目录"><a href="#规划目录" class="headerlink" title="规划目录"></a>规划目录</h3><p>MariaDB安装包存放位置：<code>/usr/local/src</code></p>
<p>MariaDB编译安装位置：<code>/usr/local/mysql</code></p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><h4 id="下载MariaDB"><a href="#下载MariaDB" class="headerlink" title="下载MariaDB"></a>下载MariaDB</h4><p>访问官网或国内源下载</p>
<h4 id="下载cmake（MariaDB编译工具）"><a href="#下载cmake（MariaDB编译工具）" class="headerlink" title="下载cmake（MariaDB编译工具）"></a>下载cmake（MariaDB编译工具）</h4><p><code>http://www.cmake.org/files/v2.8/cmake-2.8.12.1.tar.gz</code></p>
<h4 id="安装编译工具及库文件（使用CentOS-yum命令安装，安装的比较多，方便以后编译安装php、nginx等）"><a href="#安装编译工具及库文件（使用CentOS-yum命令安装，安装的比较多，方便以后编译安装php、nginx等）" class="headerlink" title="安装编译工具及库文件（使用CentOS yum命令安装，安装的比较多，方便以后编译安装php、nginx等）"></a>安装编译工具及库文件（使用CentOS yum命令安装，安装的比较多，方便以后编译安装php、nginx等）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum  install make apr* autoconf automake curl curl-devel gcc gcc-c++ gtk+-devel zlib-devel openssl openssl-devel pcre-devel gd kernel keyutils patch perl kernel-headers compat*  cpp glibc libgomp libstdc++-devel keyutils-libs-devel libsepol-devel libselinux-devel krb5-devel  libXpm* freetype freetype-devel freetype* fontconfig fontconfig-devel  libjpeg* libpng* php-common php-gd gettext gettext-devel ncurses* libtool* libxml2 libxml2-devel patch policycoreutils bison</span><br></pre></td></tr></table></figure>

<h3 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h3><h4 id="一、安装cmake"><a href="#一、安装cmake" class="headerlink" title="一、安装cmake"></a>一、安装cmake</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf cmake-2.8.12.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-2.8.12.1</span><br><span class="line">./configure</span><br><span class="line">make   <span class="comment">#编译</span></span><br><span class="line">make install   <span class="comment">#安装</span></span><br></pre></td></tr></table></figure>

<h4 id="二、安装MariaDB"><a href="#二、安装MariaDB" class="headerlink" title="二、安装MariaDB"></a>二、安装MariaDB</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mysql  <span class="comment">#添加MariaDB数据库安装用户组mysql</span></span><br><span class="line">useradd -g mysql mysql -s /bin/false  <span class="comment">#建用户mysql并加入到mysql组，不允许mysql用户直接登录系统</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mysql  <span class="comment">#创建MariaDB数据库存放目录</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /data/mysql   <span class="comment">#设置MariaDB数据库目录权限</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mysql <span class="comment">#创建MariaDB安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf mariadb-5.5.33a.tar.gz  <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> mariadb-5.5.33a <span class="comment">#进入安装目录</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql  -DMYSQL_DATADIR=/data/mysql  -DSYSCONFDIR=/etc <span class="comment">#配置</span></span><br><span class="line">make <span class="comment">#编译</span></span><br><span class="line">make install  <span class="comment">#安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"><span class="built_in">cp</span> ./support-files/my-huge.cnf  /etc/my.cnf   <span class="comment">#拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）</span></span><br><span class="line">vi /etc/my.cnf   <span class="comment">#编辑配置文件,在 [mysqld] 部分增加</span></span><br><span class="line">datadir = /data/mysql  <span class="comment">#添加MariaDB数据库路径</span></span><br><span class="line">./scripts/mysql_install_db --user=mysql  <span class="comment">#生成MariaDB系统数据库</span></span><br><span class="line"><span class="built_in">cp</span> ./support-files/mysql.server  /etc/rc.d/init.d/mysqld  <span class="comment">#把MariaDB加入系统启动</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/init.d/mysqld   <span class="comment">#增加执行权限</span></span><br><span class="line">chkconfig mysqld on  <span class="comment">#加入开机启动</span></span><br><span class="line">vi /etc/rc.d/init.d/mysqld  <span class="comment">#编辑</span></span><br><span class="line">basedir = /usr/local/mysql   <span class="comment">#MariaDB程序安装路径</span></span><br><span class="line">datadir = /data/mysql  <span class="comment">#MariaDB数据库存放目录</span></span><br><span class="line">service mysqld start  <span class="comment">#启动</span></span><br><span class="line">vi /etc/profile   <span class="comment">#把MariaDB服务加入系统环境变量：在最后添加下面这一行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin</span><br><span class="line"><span class="comment">#下面这两行把MariaDB的库文件链接到系统默认的位置，这样你在编译类似PHP等软件时可以不用指定MariaDB的库文件地址。</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/lib/mysql /usr/lib/mysql</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/include/mysql /usr/include/mysql</span><br><span class="line">shutdown -r now     <span class="comment">#需要重启系统，等待系统重新启动之后继续在终端命令行下面操作</span></span><br><span class="line">mysql_secure_installation    <span class="comment">#设置MariaDB数据库root账号密码</span></span><br><span class="line"><span class="comment">#根据提示按Y 回车输入2次密码</span></span><br><span class="line"><span class="comment">#或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password &quot;123456&quot; #修改密码</span></span><br><span class="line">service mysqld restart  <span class="comment">#重启</span></span><br><span class="line">mysql -u root -p  <span class="comment">#输入上面设置的root密码登录到mariadb控制台</span></span><br></pre></td></tr></table></figure>

<p>到此，MariaDB数据库安装完成！</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>MariaDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统单用户模式</title>
    <url>/posts/9014.html</url>
    <content><![CDATA[<h3 id="0x01-单用户模式简介"><a href="#0x01-单用户模式简介" class="headerlink" title="0x01 单用户模式简介"></a>0x01 单用户模式简介</h3><p>忘记root密码这个问题出现的几率是很高的，不过，在linux下解决这个问题也很简单，只需重启linux系统，然后引导进入linux的单用户模式（init1），由于单用户模式是不需要输入登录密码的，因此，可以直接登录系统，修改root密码即可解决问题。</p>
<p>Centos6启动时读取的文件为：<code>/etc/grub.cfg</code></p>
<p>Centos7启动时读取的文件为：<code>/etc/grub2.cfg</code></p>
<h3 id="0x02-CentOS6进入单用户模式"><a href="#0x02-CentOS6进入单用户模式" class="headerlink" title="0x02 CentOS6进入单用户模式"></a>0x02 CentOS6进入单用户模式</h3><p>1、重启系统，进入系统欢迎界面按上下左右键进入GRUB界面；</p>
<p>2、在GRUB界面选择内核版本，按下’e’键；</p>
<p>3、在此界面可以进行编辑，在最后输入<code>single</code>再按回车键返回,选择kernel这行，并按下’b’键进入单用户模式。</p>
<p>4、修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Passwd root <span class="comment">#对root密码进行修改</span></span><br></pre></td></tr></table></figure>

<p>5、reboot进行系统重启</p>
<h3 id="0x03-CentOS7进入单用户模式"><a href="#0x03-CentOS7进入单用户模式" class="headerlink" title="0x03 CentOS7进入单用户模式"></a>0x03 CentOS7进入单用户模式</h3><p>1、进入GRUB页面，选择相应的内核，按下’e’键；<br>备注：第一行为内核；第二行为援救模式。</p>
<p>2、进入内核修改信息界面，找到Linux16这一行；在这一行的末尾加上 <code>init=/bin/sh</code>按下 <code>Ctrl + x</code>进入单用户模式</p>
<p>3、进入单用户后，重新挂载根目录，使其可写；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mount -o remount,rw /</span><br></pre></td></tr></table></figure>

<p>4、修改字符集（可选）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Locale <span class="comment">#查看当前字符集</span></span><br><span class="line">$ <span class="built_in">export</span> LANG=en_US</span><br></pre></td></tr></table></figure>

<p>将终端的字符集改为英文</p>
<p>5、修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd root</span><br></pre></td></tr></table></figure>

<p>6、当selinux防火墙启动时，修改密码后要创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /.autorelabel</span><br></pre></td></tr></table></figure>
<p>否则在系统重启时无法重启</p>
<p>7、重启系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> /sbin/init</span><br></pre></td></tr></table></figure>

<h3 id="0x04-CentOS8进入单用户模式"><a href="#0x04-CentOS8进入单用户模式" class="headerlink" title="0x04 CentOS8进入单用户模式"></a>0x04 CentOS8进入单用户模式</h3><p>在开机引导时按 e 键进行编辑，在linux这一行的最末尾输入<code>rd.break</code>，并删除console相关的内容，按ctrl+x 继续启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linux ...    rd.break</span><br><span class="line"><span class="comment">##按 ctrl+x 继续启动</span></span><br><span class="line">mount -o remount,rw /sysroot/</span><br><span class="line"><span class="built_in">chroot</span> /sysroot/</span><br></pre></td></tr></table></figure>

<h3 id="0x05-OpenEuler进入单用户模式"><a href="#0x05-OpenEuler进入单用户模式" class="headerlink" title="0x05 OpenEuler进入单用户模式"></a>0x05 OpenEuler进入单用户模式</h3><p>openeuler为华为提供社区维护系统，引导界面输入 <code>e</code> ，linux这行最后面输入：<code>init=/bin/sh</code>  然后ctrl+x进入界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init=/bin/sh</span><br><span class="line">mount -o remount,rw /</span><br><span class="line"><span class="comment">##重置密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment">##输入新密码2次</span></span><br><span class="line"><span class="built_in">touch</span> /.autorelabel</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment">##重启系统</span></span><br></pre></td></tr></table></figure>

<h3 id="0x06-UOS-Euler进入单用户模式"><a href="#0x06-UOS-Euler进入单用户模式" class="headerlink" title="0x06 UOS Euler进入单用户模式"></a>0x06 UOS Euler进入单用户模式</h3><p>引导输入 <code>e</code> 在linux行将 <code>ro</code> 修改为 <code>rw</code>，该行最后添加 <code>single console=ttyS0</code>，最后按ctrl+x进入系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">single console=ttyS0</span><br></pre></td></tr></table></figure>

<p>经测试有时无法成功，可参考openeuler系统</p>
<h3 id="0x07-Kylin进入单用户模式"><a href="#0x07-Kylin进入单用户模式" class="headerlink" title="0x07 Kylin进入单用户模式"></a>0x07 Kylin进入单用户模式</h3><p>引导输入 <code>e</code> 在linux行把 <code>quiet splash</code> 删除，添加如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init=/bin/bash console=tty0</span><br></pre></td></tr></table></figure>

<p>进入时需要输入用户 <code>root</code> 密码 <code>Kylin123123</code></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8编译安装配置MySQL8数据库</title>
    <url>/posts/a7ac.html</url>
    <content><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>操作系统：CentOS 8.1</p>
<p>MySQL版本：MySQL-8.0.18</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="1、系统安装"><a href="#1、系统安装" class="headerlink" title="1、系统安装"></a>1、系统安装</h3><p>略</p>
<h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>CentOS 从7.x开始默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p>
<h4 id="1、关闭firewall"><a href="#1、关闭firewall" class="headerlink" title="1、关闭firewall"></a>1、关闭firewall</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service <span class="comment">#停止firewall</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br><span class="line">systemctl mask firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">yum remove firewalld</span><br></pre></td></tr></table></figure>

<h4 id="2、安装iptables防火墙"><a href="#2、安装iptables防火墙" class="headerlink" title="2、安装iptables防火墙"></a>2、安装iptables防火墙</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install iptables-services <span class="comment">#安装</span></span><br><span class="line">vi /etc/sysconfig/iptables <span class="comment">#编辑防火墙配置文件，开发mysql默认端口3306</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span><br><span class="line">systemctl restart iptables.service <span class="comment">#最后重启防火墙使配置生效</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service <span class="comment">#设置防火墙开机启动</span></span><br><span class="line">/usr/libexec/iptables/iptables.init restart <span class="comment">#重启防火墙</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭SELINUX"><a href="#关闭SELINUX" class="headerlink" title="关闭SELINUX"></a>关闭SELINUX</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="comment">#SELINUX=enforcing #注释掉</span></span><br><span class="line"><span class="comment">#SELINUXTYPE=targeted #注释掉</span></span><br><span class="line">SELINUX=disabled <span class="comment">#增加</span></span><br><span class="line">:wq! <span class="comment">#保存退出</span></span><br><span class="line">setenforce 0 <span class="comment">#使配置立即生效</span></span><br></pre></td></tr></table></figure>

<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="规划目录"><a href="#规划目录" class="headerlink" title="规划目录"></a>规划目录</h3><p>软件源代码包存放位置：<code>/usr/local/src</code></p>
<p>源码包编译安装位置：<code>/usr/local/软件名字</code></p>
<h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><h4 id="1、mysql"><a href="#1、mysql" class="headerlink" title="1、mysql"></a>1、mysql</h4><p><code>https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.18.tar.gz</code></p>
<h4 id="2、rpcsvc-proto-CentOS-8编译安装MySQL8需要"><a href="#2、rpcsvc-proto-CentOS-8编译安装MySQL8需要" class="headerlink" title="2、rpcsvc-proto #CentOS 8编译安装MySQL8需要"></a>2、rpcsvc-proto #CentOS 8编译安装MySQL8需要</h4><p><code>https://github.com/thkukuk/rpcsvc-proto/releases/download/v1.4/rpcsvc-proto-1.4.tar.gz</code></p>
<h4 id="3、boost-1-70-0-CentOS-8编译安装MySQL8需要"><a href="#3、boost-1-70-0-CentOS-8编译安装MySQL8需要" class="headerlink" title="3、boost_1_70_0 #CentOS 8编译安装MySQL8需要"></a>3、boost_1_70_0 #CentOS 8编译安装MySQL8需要</h4><p><code>https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.gz</code></p>
<h4 id="4、cmake-编译安装MySQL需要"><a href="#4、cmake-编译安装MySQL需要" class="headerlink" title="4、cmake #编译安装MySQL需要"></a>4、cmake #编译安装MySQL需要</h4><p><code>https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4.tar.gz</code></p>
<h4 id="五、安装编译工具及库文件（使用yum命令安装）"><a href="#五、安装编译工具及库文件（使用yum命令安装）" class="headerlink" title="五、安装编译工具及库文件（使用yum命令安装）"></a>五、安装编译工具及库文件（使用yum命令安装）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install apr* autoconf automake bison bzip2 bzip2* cpp curl curl-devel fontconfig fontconfig-devel freetype-devel gcc gcc-c++ gd gd-devel gettext gettext-devel glibc kernel kernel-headers keyutils keyutils-libs-devel krb5-devel libcom_err-devel libpng libpng-devel libjpeg* libsepol-devel libselinux-devel libstdc++-devel libtool* libgomp libxml2 libxml2-devel libXpm* libxml* libXaw-devel libXmu-devel libtiff libtiff* make openssl openssl-devel patch pcre-devel perl php-common php-gd policycoreutils telnet wget zlib-devel ncurses-devel libtirpc-devel gtk* ntpstat na* bison*</span><br></pre></td></tr></table></figure>

<h3 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h3><p>以下是用putty工具远程登录到服务器，在命令行下面操作的</p>
<h4 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h4><h5 id="1、安装rpcsvc-proto"><a href="#1、安装rpcsvc-proto" class="headerlink" title="1、安装rpcsvc-proto"></a>1、安装rpcsvc-proto</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf rpcsvc-proto-1.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rpcsvc-proto-1.4</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h5 id="2、安装cmake"><a href="#2、安装cmake" class="headerlink" title="2、安装cmake"></a>2、安装cmake</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf cmake-3.15.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.15.4</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h5 id="3、安装MySQL"><a href="#3、安装MySQL" class="headerlink" title="3、安装MySQL"></a>3、安装MySQL</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/boost</span><br><span class="line"><span class="built_in">cp</span> boost_1_70_0.tar.gz /usr/local/boost</span><br><span class="line">groupadd mysql <span class="comment">#添加mysql组</span></span><br><span class="line">useradd -g mysql mysql -s /bin/false <span class="comment">#创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mysql <span class="comment">#创建MySQL数据库存放目录</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /data/mysql <span class="comment">#设置MySQL数据库存放目录权限</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mysql <span class="comment">#创建MySQL安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src <span class="comment">#进入软件包存放目录</span></span><br><span class="line">tar zxvf mysql-8.0.18.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> mysql-8.0.18 <span class="comment">#进入目录</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DINSTALL_DATADIR=/data/mysql -DMYSQL_USER=mysql -DMYSQL_UNIX_ADDR=/tmp/mysqld.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_EMBEDDED_SERVER=1 -DFORCE_INSOURCE_BUILD=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DENABLED_LOCAL_INFILE=1 -DEXTRA_CHARSETS=all -DWITH_BOOST=/usr/local/boost</span><br><span class="line">make <span class="comment">#编译</span></span><br><span class="line">make install <span class="comment">#安装</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/my.cnf  <span class="comment">#删除系统默认的配置文件（如果默认没有就不用删除）</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql <span class="comment">#进入MySQL安装目录</span></span><br><span class="line">./bin/mysqld --user=mysql --initialize --basedir=/usr/local/mysql --datadir=/data/mysql <span class="comment">#生成mysql系统数据库 --initialize表示默认生成密码, --initialize-insecure 表示不生成密码, 密码为空。</span></span><br><span class="line"><span class="comment">#看到这一行[Note] [MY-010454] [Server] A temporary password is generated for root@localhost: !w1YKyVFFa?-</span></span><br></pre></td></tr></table></figure>
<p>记录下自动生成的mysql管理员root账号登录密码<code>!w1YKyVFFa?-</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/local/mysql/my.cnf</span><br><span class="line"><span class="comment">#mysql 8.x默认没有配置文件，我们自己创建一个。</span></span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">user = mysql</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">tmpdir = /tmp</span><br><span class="line">key_buffer_size=16M</span><br><span class="line">max_allowed_packet=128M</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line"><span class="comment">#设置加密方式为mysql_native_password，MySQL 8.0默认使用caching_sha2_password加密。</span></span><br><span class="line">open_files_limit = 60000</span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line">server-id = 1</span><br><span class="line">character-set-server = utf8</span><br><span class="line">federated</span><br><span class="line">max_connections = 1000</span><br><span class="line">max_connect_errors = 100000</span><br><span class="line">interactive_timeout = 86400</span><br><span class="line">wait_timeout = 86400</span><br><span class="line">sync_binlog=0</span><br><span class="line">back_log=100</span><br><span class="line">default-storage-engine = InnoDB</span><br><span class="line">log_slave_updates = 1</span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">[client]</span><br><span class="line"><span class="comment"># The following password will be sent to all standard MySQL clients</span></span><br><span class="line">password=<span class="string">&quot;my password&quot;</span></span><br><span class="line">[mysqld-8.0]</span><br><span class="line">sql_mode=TRADITIONAL</span><br><span class="line">[mysqladmin]</span><br><span class="line">force</span><br><span class="line">[mysqld]</span><br><span class="line">key_buffer_size=16M</span><br></pre></td></tr></table></figure>

<p>:wq! #保存退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/my.cnf /etc/my.cnf  <span class="comment">#添加到/etc目录的软连接</span></span><br><span class="line"><span class="built_in">cp</span> /usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld <span class="comment">#把Mysql加入系统启动</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/init.d/mysqld <span class="comment">#增加执行权限</span></span><br><span class="line">chkconfig mysqld on <span class="comment">#加入开机启动</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/init.d/mysqld <span class="comment">#编辑</span></span><br><span class="line">basedir=/usr/local/mysql <span class="comment">#MySQL程序安装路径</span></span><br><span class="line">datadir=/data/mysql <span class="comment">#MySQl数据库存放目录</span></span><br></pre></td></tr></table></figure>

<p>:wq! #保存退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start <span class="comment">#启动</span></span><br><span class="line">vi /etc/profile <span class="comment">#把mysql服务加入系统环境变量：在最后添加下面这一行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure>

<p>:wq! #保存退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile <span class="comment">#使配置立刻生效</span></span><br></pre></td></tr></table></figure>

<p>下面这两行把myslq的库文件链接到系统默认的位置，这样你在编译类似PHP等软件时可以不用指定mysql的库文件地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/lib/mysql /usr/lib/mysql</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/include/mysql /usr/include/mysql</span><br><span class="line"><span class="built_in">mkdir</span> /var/lib/mysql <span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">ln</span> -s /tmp/mysql.sock /var/lib/mysql/mysql.sock <span class="comment">#添加软链接</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p  <span class="comment">#输入之前生成的密码!w1YKyVFFa?-，回车</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> PASSWORD EXPIRE NEVER; <span class="comment">#修改密码，NEVER表示密码永不过期</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line"><span class="comment">#使用WITH mysql_native_password加密</span></span><br><span class="line"><span class="comment">#MySQL 8.0加密方式从mysql_native_password 更改为 caching_sha2_password，mysql8.x之前的客户端远程连接可能报错：authentication plugin caching_sha2</span></span><br><span class="line">flush privileges;  <span class="comment">#刷新系统授权表</span></span><br><span class="line"><span class="built_in">exit</span>  <span class="comment">#退出mysql控制台</span></span><br></pre></td></tr></table></figure>

<h3 id="二、创建MySQL数据库、添加用户并授权"><a href="#二、创建MySQL数据库、添加用户并授权" class="headerlink" title="二、创建MySQL数据库、添加用户并授权"></a>二、创建MySQL数据库、添加用户并授权</h3><p>数据库名称：aiotlab-db<br>数据库用户名：aiotlab<br>数据库密码：aiotlab<br>授权aiotlab用户对aiotlab-db具有全部操作权限<br>继续在mysql控制台操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#输入刚刚修改过的密码123456，回车</span></span><br><span class="line">Create DATABASE IF NOT EXISTS aiotlab-db default charset utf8 COLLATE utf8_general_ci;</span><br><span class="line"><span class="comment">#创建数据库</span></span><br><span class="line">CREATE USER <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;aiotlab&#x27;</span>;</span><br><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">CREATE USER <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;aiotlab&#x27;</span>;</span><br><span class="line"><span class="comment">#加密方式为mysql_native_password</span></span><br><span class="line">grant all privileges on aiotlab-db.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">#授权用户osyunwei.com对数据库www.osyunwei.com具有全部操作权限</span></span><br><span class="line">grant all privileges on aiotlab-db.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="comment">#授权用户</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment">#授权root用户具有全部数据库本地权限</span></span><br></pre></td></tr></table></figure>

<p>MySQL5.7版本后要授权用户对所有数据库有SUPER权限，否则上一步对用户的授权只能连接但无任何操作权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grant SUPER on *.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">#授予用户对所有数据库有SUPER权限，否则只能连接无任何操作权限。</span></span><br><span class="line">grant SUPER on *.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">#刷新系统授权表</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出mysql控制台</span></span><br><span class="line">service mysqld restart</span><br><span class="line"><span class="comment">#重启mysql数据库</span></span><br></pre></td></tr></table></figure>

<p>至此，CentOS 8.x安装MySQL 8.x并创建数据库添加用户对用户进行授权完成。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Docker部署GitLab环境搭建</title>
    <url>/posts/3184.html</url>
    <content><![CDATA[<p>最近在学习自动化部署的一些内容，涉及到的内容有Docker、Jenkins、Gitlab等内容，今天通过docker玩了一遍gitlab，下面是一些心得。</p>
<h2 id="0x01-前提条件"><a href="#0x01-前提条件" class="headerlink" title="0x01 前提条件"></a>0x01 前提条件</h2><ul>
<li>（1）存在docker</li>
<li>（2）服务器可以联网（外网）</li>
<li>（3）服务器内存至少4G（内存不够会出现502错误）</li>
</ul>
<h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>本次安装在CentOS7下进行，下面的命令建议复制到记事本后再从记事本复制</p>
<h3 id="卸载旧版docker"><a href="#卸载旧版docker" class="headerlink" title="卸载旧版docker"></a>卸载旧版docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="配置-docker-拉取源"><a href="#配置-docker-拉取源" class="headerlink" title="配置 docker 拉取源"></a>配置 docker 拉取源</h3><p>如不配置源因网络原因可能会拉取失败，配置国内拉取源提升稳定性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/docker</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    \&quot;registry-mirrors\&quot; : [</span></span><br><span class="line"><span class="string">    \&quot;https://registry.docker-cn.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://docker.mirrors.ustc.edu.cn\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;http://hub-mirror.c.163.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://cr.console.aliyun.com/\&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&gt;/etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<h3 id="安装docker并配置docker源"><a href="#安装docker并配置docker源" class="headerlink" title="安装docker并配置docker源"></a>安装docker并配置docker源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h3 id="gitlab镜像拉取"><a href="#gitlab镜像拉取" class="headerlink" title="gitlab镜像拉取"></a>gitlab镜像拉取</h3><blockquote>
<p>gitlab-ce为稳定版本，后面不填写版本则默认pull最新latest版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull gitlab/gitlab-ce:latest</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /home/gitlab/&#123;config,logs,data&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x03-配置环境"><a href="#0x03-配置环境" class="headerlink" title="0x03 配置环境"></a>0x03 配置环境</h2><h3 id="运行gitlab镜像"><a href="#运行gitlab镜像" class="headerlink" title="运行gitlab镜像"></a>运行gitlab镜像</h3><p>拉取gitlab镜像并配置环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line"> -p 443:443 \</span><br><span class="line"> -p 80:80 \</span><br><span class="line"> -p 222:22 \</span><br><span class="line"> --name gitlab \</span><br><span class="line"> --restart always \</span><br><span class="line"> -v /home/gitlab/config:/etc/gitlab \</span><br><span class="line"> -v /home/gitlab/logs:/var/log/gitlab \</span><br><span class="line"> -v /home/gitlab/data:/var/opt/gitlab \</span><br><span class="line"> gitlab/gitlab-ce</span><br></pre></td></tr></table></figure>

<ul>
<li>-d：后台运行</li>
<li>-p：将容器内部端口向外映射</li>
<li>–name：命名容器名称</li>
<li>-v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录</li>
</ul>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>按上面的方式，gitlab容器运行没问题，但在gitlab上创建项目的时候，生成项目的URL访问地址是按容器的hostname来生成的，也就是容器的id。作为gitlab服务器，我们需要一个固定的URL访问地址，于是需要配置gitlab.rb（宿主机路径：<code>/home/gitlab/config/gitlab.rb</code>）。</p>
<p>gitlab.rb文件内容默认全是注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /home/gitlab/config/gitlab.rb</span><br><span class="line"><span class="comment"># 配置http协议所使用的访问地址,不加端口号默认为80</span></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.199.231&#x27;</span></span><br><span class="line"><span class="comment"># 配置ssh协议所使用的访问地址和端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;192.168.199.231&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 222</span><br><span class="line"><span class="comment"># 此端口是run时22端口映射的222端口</span></span><br><span class="line">:wq <span class="comment">#保存配置文件并退出</span></span><br></pre></td></tr></table></figure>

<p>修改邮箱</p>
<p>在gitlab.rb文件的最后添加如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否启用</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line"><span class="comment"># SMTP服务的地址</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465</span><br><span class="line"><span class="comment"># 你的QQ邮箱（发送账号）</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;xxx@qq.com&quot;</span></span><br><span class="line"><span class="comment"># 授权码</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;********&quot;</span></span><br><span class="line"><span class="comment"># 域名</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line"><span class="comment"># 登录验证</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line"><span class="comment"># 使用了465端口，就需要配置下面三项</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_openssl_verify_mode&#x27;</span>] = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的QQ邮箱（发送账号）</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;xxx@qq.com&#x27;</span></span><br></pre></td></tr></table></figure>

<p>应用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>修改port</p>
<p>修改gitlab.yml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 文件路径 /opt/gitlab/embedded/service/gitlab-rails/config</span><br><span class="line">sudo <span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails/config</span><br><span class="line">vim gitlab.yml</span><br><span class="line">// 修改port 为8090</span><br></pre></td></tr></table></figure>

<p>重启gitlab容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker restart gitlab</span><br><span class="line"><span class="comment"># 查看启动情况</span></span><br><span class="line">$ docker ps</span><br><span class="line"><span class="comment"># 登录容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it gitlab <span class="comment">#!/usr/bin/env bash</span></span><br></pre></td></tr></table></figure>

<p>验证邮箱服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在容器中进入命令行</span><br><span class="line">sudo gitlab-rails console</span><br><span class="line">// 测试邮件发送</span><br><span class="line">sudo Notify.test_email(<span class="string">&quot;xxx@163.com&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;gitlab&quot;</span>).deliver_now</span><br><span class="line">// 退出命令行</span><br><span class="line">sudo <span class="built_in">exit</span></span><br><span class="line">// 退出容器</span><br><span class="line">sudo <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>此时项目的仓库地址就变了。如果ssh端口地址不是默认的22，就会加上ssh:&#x2F;&#x2F; 协议头</p>
<p>打开浏览器输入ip地址(因为我的gitlab端口为80，所以浏览器url不用输入端口号，如果端口号不是80，则打开为：ip:端口号)</p>
<p>第一次进入要输入新的root用户密码，设置好之后确定就行<br>下面我们就可以新建一个项目了，点击Create a project<br>创建项目。</p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>安装配置Docker环境</title>
    <url>/posts/5d00.html</url>
    <content><![CDATA[<h2 id="0x01-Docker-简介"><a href="#0x01-Docker-简介" class="headerlink" title="0x01 Docker 简介"></a>0x01 Docker 简介</h2><p>Docker是一个软件集装箱化平台，这意味着您可以构建应用程序，将它与其依赖关系一起打包到一个容器中，然后这些容器可以很容易地运送到其他机器上运行。<br>但什么是集装箱？集装化（也称为基于容器的虚拟化和应用程序集装箱化）是用于部署和运行分布式应用程序的OS级虚拟化方法，无需为每个应用程序启动整个VM。 相反，多个独立的系统（称为容器）在单个控制主机上运行并访问单个内核。<br>容器映像是一个轻量级的、独立的、可执行的软件包，它包括运行它所需的一切：代码、运行时、系统工具、系统库设置。<br>所以主要目标是将软件打包成标准化的单元进行开发，发货和部署。</p>
<h2 id="0x02-安装前配置"><a href="#0x02-安装前配置" class="headerlink" title="0x02 安装前配置"></a>0x02 安装前配置</h2><h3 id="Docker版本检查"><a href="#Docker版本检查" class="headerlink" title="Docker版本检查"></a>Docker版本检查</h3><p>docker要求CentOS 系统的内核版本高于 3.10 ，内存须 4G 以上，安装之前首先要验证你的CentOS 版本是否支持 Docker 。</p>
<p>通过uname -r 命令查看你当前的内核版本（建议使用xshell连接虚拟机进行命令操作）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure>

<h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><p>使用root 权限登录 CentOS。确保 yum 包更新到最新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y update</span><br></pre></td></tr></table></figure>

<h3 id="卸载旧版本（如果安装过就版本的话）"><a href="#卸载旧版本（如果安装过就版本的话）" class="headerlink" title="卸载旧版本（如果安装过就版本的话）"></a>卸载旧版本（如果安装过就版本的话）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove docker \</span><br><span class="line">             docker-common \</span><br><span class="line">             docker-selinux \</span><br><span class="line">             docker-engine \</span><br><span class="line">             docker-client \</span><br><span class="line">             docker-client-latest \</span><br><span class="line">             docker-latest \</span><br><span class="line">             docker-latest-logrotate \</span><br><span class="line">             docker-logrotate</span><br></pre></td></tr></table></figure>

<p>如果安装过旧版本docker，有就会卸载当前版本；如果没安装过，运行上面的命令也没关系，只是提示未安装</p>
<h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<h3 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h3><p>设置国内常用源，如清华镜像仓库，速度很快<br>如果没有安装wget则安装，如已安装则会跳过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br><span class="line"><span class="comment">#清缓存</span></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<h2 id="0x03-安装-docker-ce"><a href="#0x03-安装-docker-ce" class="headerlink" title="0x03 安装 docker-ce"></a>0x03 安装 docker-ce</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装 docker-ce</span></span><br><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h3 id="搜索安装指定版本"><a href="#搜索安装指定版本" class="headerlink" title="搜索安装指定版本"></a>搜索安装指定版本</h3><p>查看源中所有版本 docker-ce</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment"># 安装指定版本 docker</span></span><br><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="搜索映像"><a href="#搜索映像" class="headerlink" title="搜索映像"></a>搜索映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<h3 id="运行hello-world-映像来验证是否正确安装了Docker-Engine"><a href="#运行hello-world-映像来验证是否正确安装了Docker-Engine" class="headerlink" title="运行hello-world 映像来验证是否正确安装了Docker Engine"></a>运行hello-world 映像来验证是否正确安装了Docker Engine</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<h4 id="下载映像后面可加版本号"><a href="#下载映像后面可加版本号" class="headerlink" title="下载映像后面可加版本号"></a>下载映像后面可加版本号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="查看运行中的映像"><a href="#查看运行中的映像" class="headerlink" title="查看运行中的映像"></a>查看运行中的映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h3 id="查看本地所有映像"><a href="#查看本地所有映像" class="headerlink" title="查看本地所有映像"></a>查看本地所有映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<h3 id="查看本地映像"><a href="#查看本地映像" class="headerlink" title="查看本地映像"></a>查看本地映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="停止运行的映像"><a href="#停止运行的映像" class="headerlink" title="停止运行的映像"></a>停止运行的映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop name/id</span><br></pre></td></tr></table></figure>

<h3 id="启动映像"><a href="#启动映像" class="headerlink" title="启动映像"></a>启动映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start name/id</span><br></pre></td></tr></table></figure>

<h3 id="登录docker映像"><a href="#登录docker映像" class="headerlink" title="登录docker映像"></a>登录docker映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it name/id  /bin/sh</span><br></pre></td></tr></table></figure>

<h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="删除所有图像，容器和卷"><a href="#删除所有图像，容器和卷" class="headerlink" title="删除所有图像，容器和卷"></a>删除所有图像，容器和卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Docker部署jumpserver环境</title>
    <url>/posts/12a1.html</url>
    <content><![CDATA[<p>在 Docker中部署jumpserver环境也可以分为几次情况</p>
<ul>
<li>环境都在一个docker镜像中，这种环境不建议</li>
<li>环境分为三个docker镜像，jumpserver、mysql、redis各一个镜像</li>
</ul>
<p>本次我们部署环境为第二种情况</p>
<h2 id="0x01-安装-Docker"><a href="#0x01-安装-Docker" class="headerlink" title="0x01 安装 Docker"></a>0x01 安装 Docker</h2><h3 id="配置国内映像源"><a href="#配置国内映像源" class="headerlink" title="配置国内映像源"></a>配置国内映像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/docker</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    \&quot;registry-mirrors\&quot; : [</span></span><br><span class="line"><span class="string">    \&quot;https://registry.docker-cn.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://docker.mirrors.ustc.edu.cn\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;http://hub-mirror.c.163.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://cr.console.aliyun.com/\&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&gt;/etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h3 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$SECRET_KEY</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span> SECRET_KEY=`<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc A-Za-z0-9 | <span class="built_in">head</span> -c 50`; <span class="built_in">echo</span> <span class="string">&quot;SECRET_KEY=<span class="variable">$SECRET_KEY</span>&quot;</span> &gt;&gt; ~/.bashrc; <span class="built_in">echo</span> <span class="variable">$SECRET_KEY</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="variable">$SECRET_KEY</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$BOOTSTRAP_TOKEN</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span> BOOTSTRAP_TOKEN=`<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc A-Za-z0-9 | <span class="built_in">head</span> -c 16`; <span class="built_in">echo</span> <span class="string">&quot;BOOTSTRAP_TOKEN=<span class="variable">$BOOTSTRAP_TOKEN</span>&quot;</span> &gt;&gt; ~/.bashrc; <span class="built_in">echo</span> <span class="variable">$BOOTSTRAP_TOKEN</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="variable">$BOOTSTRAP_TOKEN</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>注：生成完 SECRET_KEY 和 BOOTSTRAP_TOKEN 变量后一定要确认一下，如果出现异常将会影响到后面的过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看秘钥是否生成</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SECRET_KEY</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$BOOTSTRAP_TOKEN</span></span><br></pre></td></tr></table></figure>

<p>创建jms容器中的日志及数据挂到宿机的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/jumpserver/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /home/koko/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /home/nginx/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /home/mysql/&#123;data,logs,conf&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x02-映像拉取"><a href="#0x02-映像拉取" class="headerlink" title="0x02 映像拉取"></a>0x02 映像拉取</h2><h3 id="mysql-映像拉取"><a href="#mysql-映像拉取" class="headerlink" title="mysql 映像拉取"></a>mysql 映像拉取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker pull mysql</span></span><br><span class="line">docker run --restart=always \</span><br><span class="line">--name mysql5.7 -<span class="built_in">id</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">&quot;jumpserver&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;jumpserver&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;Ya0ling&quot;</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;Ya0ling&quot;</span> \</span><br><span class="line">-v /home/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /home/mysql/logs:/var/log/mysql/ \</span><br><span class="line">-v /home/mysql/conf:/etc/mysql/ \</span><br><span class="line">-p 3306:3306 -d mysql:5.7.20</span><br></pre></td></tr></table></figure>

<h3 id="redis-映像拉取"><a href="#redis-映像拉取" class="headerlink" title="redis 映像拉取"></a>redis 映像拉取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker pull redis</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vm.overcommit_memory=1&quot;</span>&gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.somaxconn= 1024&quot;</span>&gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27;&quot;</span>&gt;&gt;/etc/rc.local</span><br><span class="line">sysctl -p</span><br><span class="line"><span class="comment"># 拉取映像</span></span><br><span class="line">docker run -p 6379:6379 --name redis -v /home/redis/data:/data -d redis redis-server --requirepass <span class="string">&quot;Ya0ling&quot;</span> --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>redis容器中登录方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看映像运行情况</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 登录 redis 映像</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis /bin/bash</span><br><span class="line"><span class="comment"># 映像中登录 redis 查看key</span></span><br><span class="line">redis-cli -h localhost -p 6379</span><br><span class="line"><span class="comment"># 输入 redis 密码</span></span><br><span class="line">auth Ya0ling</span><br><span class="line"><span class="comment"># 查看 key</span></span><br><span class="line">auth key *</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>#注意映射关系修改配置为支持utf8mb4,或使用客户端登录修改jumpserver数据库编码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /data/mysql/conf/mysql.cnf</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># vim /data/mysql/conf/mysqld.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line"><span class="comment">#log-error      = /var/log/mysql/error.log</span></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line">character-set-server=utf8mb4</span><br></pre></td></tr></table></figure>

<p>创建数据库并设置为utf8mb4编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database jumpserver default charset <span class="string">&#x27;utf8mb4&#x27;</span> collate <span class="string">&#x27;utf8mb4_general_ci&#x27;</span>;</span><br><span class="line">grant all on jumpserver.* to <span class="string">&#x27;jumpserver&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;weakPassword&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>修改数据库的字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;use jumpserver</span><br><span class="line">mysql&gt;alter database jumpserver character <span class="built_in">set</span> utf8mb4;</span><br><span class="line"><span class="comment"># 查看数据库编码</span></span><br><span class="line">show variables like <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line"><span class="comment"># 暂时设置编码</span></span><br><span class="line"><span class="built_in">set</span> character_set_client=utf8mb4;</span><br></pre></td></tr></table></figure>

<p>修改my.conf设置编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure>

<h3 id="拉取-jumpserver-映像"><a href="#拉取-jumpserver-映像" class="headerlink" title="拉取 jumpserver 映像"></a>拉取 jumpserver 映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker pull jms</span></span><br><span class="line">docker run --restart=always \</span><br><span class="line">--name jms_all -d \</span><br><span class="line">-p 80:80 -p 2222:2222 \</span><br><span class="line">-e SECRET_KEY=<span class="variable">$SECRET_KEY</span> \</span><br><span class="line">-e BOOTSTRAP_TOKEN=<span class="variable">$BOOTSTRAP_TOKEN</span> \</span><br><span class="line">-v /home/jumpserver/data:/opt/jumpserver/data \</span><br><span class="line">-v /home/jumpserver/logs:/opt/jumpserver/logs \</span><br><span class="line">-v /home/koko/data:/jumpserver/koko/data \</span><br><span class="line">-v /home/nginx/logs:/var/log/nginx/ \</span><br><span class="line">-e DB_HOST=<span class="string">&quot;mysql5.7&quot;</span> \</span><br><span class="line">-e DB_PORT=3306 \</span><br><span class="line">-e DB_USER=root \</span><br><span class="line">-e DB_PASSWORD=Ya0ling \</span><br><span class="line">-e DB_NAME=jumpserver \</span><br><span class="line">--<span class="built_in">link</span> mysql5.7:mysql \</span><br><span class="line">-e REDIS_HOST=redis \</span><br><span class="line">-e REDIS_PORT=6379 \</span><br><span class="line">-e REDIS_PASSWORD=Ya0ling \</span><br><span class="line">--<span class="built_in">link</span> redis:redis \</span><br><span class="line">jumpserver/jms_all:latest</span><br></pre></td></tr></table></figure>

<p>测试（其他机器连接，连接用户是admin，密码是admin）</p>
<p>docker容器设置开机自启动：</p>
<ul>
<li>–restart具体参数值详细信息</li>
<li>no - 容器退出时，不重启容器</li>
<li>on-failure - 只有在非0状态退出时才从新启动容器</li>
<li>always - 无论退出状态是如何，都重启容器<br>使用 on-failure 策略时指定 Docker 将尝试重新启动容器的最大次数；默认情况下Docker将尝试永远重新启动容器；</li>
<li>docker run –restart&#x3D;on-failure:10 redis<br>如果创建容器时未指定 –restart&#x3D;always ,可通过 update 命令更改；    </li>
<li>docker update –restart&#x3D;always 容器ID</li>
</ul>
<blockquote>
<p>如未使用–restart&#x3D;always选项，在服务器或其他情况导致服务器关机&#x2F;重启，再次启动容器时需先起MySQL、redis，最后起jms</p>
</blockquote>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>jumpserver</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo与GitHub搭建独立域名博客</title>
    <url>/posts/3eeb.html</url>
    <content><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>Git</li>
<li>Nodejs</li>
<li>安装Hexo及代码提交托管需要以上两个条件</li>
</ul>
<hr>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><h4 id="Windows平台下安装"><a href="#Windows平台下安装" class="headerlink" title="Windows平台下安装"></a>Windows平台下安装</h4><p>Windows平台下安装相关要简单，下载安装包一路下一步便是。因此不在多叙述。<a href="https://git-scm.com/">Git官网下载</a>  <a href="https://npm.taobao.org/mirrors/git-for-windows/v2.25.0.windows.1/Git-2.25.0-32-bit.exe">淘宝镜像下载</a></p>
<h4 id="CentOS平台安装"><a href="#CentOS平台安装" class="headerlink" title="CentOS平台安装"></a>CentOS平台安装</h4><p>在CentOS平台安装最好是先更新为国内Yum源，并更新系统软件等包为最新。这样速度较快，支持较好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install git</span><br></pre></td></tr></table></figure>

<h4 id="Ubuntu平台安装"><a href="#Ubuntu平台安装" class="headerlink" title="Ubuntu平台安装"></a>Ubuntu平台安装</h4><p>在Ubuntu平台安装与在CentOS相差不大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install git</span><br></pre></td></tr></table></figure>

<h4 id="Mac平台安装"><a href="#Mac平台安装" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h4><p>在Mac平台安装既可以通过GUI的方式来安装也可以通过Command的方式来安装，使用Homebrew进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo brew install git</span><br></pre></td></tr></table></figure>

<p>如果没有安装HomBrew， <a href="https://brew.sh/index_zh-cn">可以参考</a></p>
<h3 id="Git-配置命令"><a href="#Git-配置命令" class="headerlink" title="Git 配置命令"></a>Git 配置命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用前配置全局信息</span></span><br><span class="line">git config --global user.name <span class="string">&#x27;你的名字&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;你的邮箱&#x27;</span></span><br><span class="line"><span class="comment">#查看是否已配置成功</span></span><br><span class="line">git config --list --global</span><br><span class="line"><span class="comment">#在你需要使用Git的文件夹下运行</span></span><br><span class="line">git init                        <span class="comment">#初始化</span></span><br><span class="line">git add .                        <span class="comment">#添加变更文件到暂存区</span></span><br><span class="line">git status                        <span class="comment">#查看变更信息</span></span><br><span class="line">git commit -m <span class="string">&#x27;你需要写的信息&#x27;</span>        <span class="comment">#提交到工作区</span></span><br><span class="line">git remote add origin https://github.com/用户名/仓库名.git    <span class="comment">#添加Github远程连接</span></span><br><span class="line">git push origin                 <span class="comment">#上传到GitHub</span></span><br><span class="line">git push origin -f                <span class="comment">#强制上传到GitHub</span></span><br></pre></td></tr></table></figure>

<h4 id="Git代理相关"><a href="#Git代理相关" class="headerlink" title="Git代理相关"></a>Git代理相关</h4><p>查看当前的代理设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy</span><br><span class="line">git config --global https.proxy</span><br></pre></td></tr></table></figure>

<p>设置当前代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:1080&#x27;</span></span><br><span class="line">git config --global https.proxy <span class="string">&#x27;http://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>

<p>删除代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<p>其它Git用法请参考<a href="https://git-scm.com/book/zh/v2">文档</a></p>
<h3 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h3><h4 id="Windows平台安装"><a href="#Windows平台安装" class="headerlink" title="Windows平台安装"></a>Windows平台安装</h4><p>Windows平台安装Node较简单，不再多叙述。 <a href="http://nodejs.cn/download/">Node下载</a></p>
<p>安装完后输入 node -v 查询版本信息</p>
<h4 id="CentOS平台"><a href="#CentOS平台" class="headerlink" title="CentOS平台"></a>CentOS平台</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install nodejs npm</span><br></pre></td></tr></table></figure>

<p>源码安装,先下载 Node源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo tar -xvf node-v10.16.0-linux-x64.tar.xz</span><br><span class="line">$ sudo <span class="built_in">mv</span> node-v10.16.0 /home/blue/applications</span><br><span class="line">$ <span class="built_in">ln</span> -s /home/blue/applications/node /home/blue/applications/node</span><br><span class="line">$ sudo <span class="built_in">chmod</span> -R 755 /home/blue/applications/node-v10.16.0</span><br><span class="line">$ sudo <span class="built_in">chmod</span> -R 755 /home/blue/applications/node</span><br><span class="line">$ <span class="built_in">cd</span> /home/blue/applications/node</span><br><span class="line">$ sudo ./configure</span><br><span class="line">$ sudo make &amp;&amp; make install</span><br><span class="line">$ sudo node --version</span><br><span class="line">v10.16.0</span><br></pre></td></tr></table></figure>

<h4 id="Ubnutu平台安装"><a href="#Ubnutu平台安装" class="headerlink" title="Ubnutu平台安装"></a>Ubnutu平台安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nodejs npm</span><br></pre></td></tr></table></figure>

<h4 id="Mac平台安装-1"><a href="#Mac平台安装-1" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo brew install node npm</span><br></pre></td></tr></table></figure>

<h4 id="设置国内NPM源"><a href="#设置国内NPM源" class="headerlink" title="设置国内NPM源"></a>设置国内NPM源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 永久设置全局淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</span><br><span class="line"><span class="comment"># 临时修改镜像源</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 永久设置为淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 查看npm的配置</span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<h4 id="安装-Yarn-非必须）"><a href="#安装-Yarn-非必须）" class="headerlink" title="安装 Yarn (非必须）"></a>安装 Yarn (非必须）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br><span class="line"><span class="comment"># 配置yarn淘宝源</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry <span class="string">&#x27;https://registry.npm.taobao.org&#x27;</span></span><br><span class="line"><span class="comment"># 设置 npm 缓存</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;/home/blue/applications/cache/node/prefix&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;/home/blue/applications/cache/node/cache&quot;</span></span><br></pre></td></tr></table></figure>

<p>还需要将&#x2F;home&#x2F;blue&#x2F;applications&#x2F;cache&#x2F;node&#x2F;prefix添加到PATH环境变量</p>
<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo   <span class="comment">#安装hexo</span></span><br><span class="line">npm install           <span class="comment">#安装博客需要的依赖文件</span></span><br><span class="line"><span class="comment"># 配置国内淘宝 cnpm ( 使用npm较慢时可改用)</span></span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">$ sudo cnpm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h3><p>创建一个hexo仓库文件夹，进入文件夹初始化hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/hexo</span><br><span class="line">$ hexo init</span><br><span class="line">INFO Cloning hexo-starter .....</span><br></pre></td></tr></table></figure>

<p>初始化完成后，在hexo目录下生成相关文件</p>
<p>hexo 目录结构</p>
<ul>
<li>_config.yml          配置文件</li>
<li>_public            生成的静态文件，这个目录最终会发布到服务器</li>
<li>_scaffolds         通用模板</li>
<li>_source         保存编写的markdown文件</li>
<li>drafts            草稿文件</li>
<li>themes             博客主题</li>
<li>node_modules     类库</li>
</ul>
<h3 id="安装博客主题"><a href="#安装博客主题" class="headerlink" title="安装博客主题"></a>安装博客主题</h3><p>在hexo目录中运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery themes/matery</span><br><span class="line"><span class="comment"># 启用主题</span></span><br><span class="line">$ vi _config.yml</span><br><span class="line"><span class="comment"># 修改文件中的 theme</span></span><br><span class="line">theme: matery</span><br></pre></td></tr></table></figure>

<p>克隆完成后，在&#x2F;Hexo&#x2F;themes目录下，可以看到 landscape和matery 两个文件夹。<br>我们所要使用的主题都是放在这个目录下，Hexo默认使用的是landscape主题，NexT主题用的比较多且更多样化，我们这一步克隆了next主题，接下来会使用next主题进行演示。<br>想获取更多主题，可在网站：<a href="https://hexo.io/themes/">此处</a>选择自己喜欢的主题，按照此步的步骤clone下来。</p>
<h3 id="hexo目录中-confit-yml文件配置"><a href="#hexo目录中-confit-yml文件配置" class="headerlink" title="hexo目录中_confit.yml文件配置"></a>hexo目录中_confit.yml文件配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="comment"># 博客名称</span></span><br><span class="line">title: aiotlab</span><br><span class="line"><span class="comment"># 副标题 </span></span><br><span class="line">subtitle: aiotlab blog</span><br><span class="line"><span class="comment"># 个人简介</span></span><br><span class="line">description: 这是 aiotlab blog</span><br><span class="line">keywords: aiotlab,lag,aiotlab</span><br><span class="line"><span class="comment"># 博主</span></span><br><span class="line">author: Jeremy Peng</span><br><span class="line"><span class="comment"># 语言</span></span><br><span class="line">language: zh-CN</span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line">url    :网址    </span><br><span class="line">root :网站根目录    </span><br><span class="line">permalink: 文章的永久链接格式 :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:    永久链接中各部分的默认值    </span><br><span class="line">pretty_urls: 改写 permalink 的值来美化 URL    </span><br><span class="line">pretty_urls.trailing_index: 是否在永久链接中保留尾部的 index.html，设置为 <span class="literal">false</span>时去除</span><br><span class="line">pretty_urls.trailing_html: 是否在永久链接中保留尾部的 .html, 设置为 <span class="literal">false</span> 时去除</span><br><span class="line"><span class="comment"># 目录(基本不需改)</span></span><br><span class="line">source_dir        资源文件夹，这个文件夹用来存放内容</span><br><span class="line">public_dir        公共文件夹，这个文件夹用于存放chang生成的站点文件</span><br><span class="line">tag_dir            标签文件夹</span><br><span class="line">archive_dir        归档文件夹</span><br><span class="line">category_dir    分类文件夹</span><br><span class="line">code_dir        Include code 文件夹，source_dir 下的子目录</span><br><span class="line">i18n_dir        国际化（i18n）文件夹</span><br><span class="line">skip_render        跳过指定文件的渲染。(常用于跳过GitHub的README.md渲染)</span><br><span class="line"><span class="comment"># 分页</span></span><br><span class="line">per_page        每页显示的文章量 (0 关闭分页功能,默认10)</span><br><span class="line">pagination_dir    分页目录</span><br><span class="line"><span class="comment"># 主题,当前主题名称</span></span><br><span class="line">theme: matery</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 仓库</span><br><span class="line">  branch: 分支</span><br></pre></td></tr></table></figure>

<h4 id="新建分类categories页"><a href="#新建分类categories页" class="headerlink" title="新建分类categories页"></a>新建分类categories页</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑文件 &#x2F;source&#x2F;categories&#x2F;index.md，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line"><span class="built_in">date</span>: 2020-03-01</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;categories&quot;</span></span><br><span class="line">layout: <span class="string">&quot;categories&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑文件 &#x2F;source&#x2F;tags&#x2F;index.md，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2020-03-01 18:23:38</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line">layout: <span class="string">&quot;tags&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑文件 &#x2F;source&#x2F;about&#x2F;index.md，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line"><span class="built_in">date</span>: 2020-03-01 17:25:30</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;about&quot;</span></span><br><span class="line">layout: <span class="string">&quot;about&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;friends&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑文件 &#x2F;source&#x2F;friends&#x2F;index.md，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: friends</span><br><span class="line"><span class="built_in">date</span>: 2020-03-01 21:25:30</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;friends&quot;</span></span><br><span class="line">layout: <span class="string">&quot;friends&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;https://cdn.jsdelivr.net/gh/jeremysvn/aiotlab/medias/avatar.jpg&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;AiotLab&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;这是我的博客&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://aiotlab.info/&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去学习&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;https://s2.ax1x.com/2020/02/13/1q6iAs.th.png&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;AiotLab&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;这是我的其他博客&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;http://aiotlab.cc/&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去查看&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<h4 id="新建留言contact页"><a href="#新建留言contact页" class="headerlink" title="新建留言contact页"></a>新建留言contact页</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;contact&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑文件 &#x2F;source&#x2F;contact&#x2F;infex.md 内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: contact</span><br><span class="line"><span class="built_in">date</span>: 2020-03-01 21:25:30</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;contact&quot;</span></span><br><span class="line">layout: <span class="string">&quot;contact&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="发布测试"><a href="#发布测试" class="headerlink" title="发布测试"></a>发布测试</h3><h4 id="本地发布测试"><a href="#本地发布测试" class="headerlink" title="本地发布测试"></a>本地发布测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">...</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到博客效果</p>
<h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><p>访问 <a href="https://github.com/">https://github.com/</a> ，申请注册账号，并创建一个仓库</p>
<h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:帐号/仓库名.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh key"></a>配置 ssh key</h3><h4 id="创建-ssh-key"><a href="#创建-ssh-key" class="headerlink" title="创建 ssh key"></a>创建 ssh key</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “aiotlab@126.com”</span><br></pre></td></tr></table></figure>

<p>连续三个或四个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub</p>
<h5 id="添加密钥到ssh-agent"><a href="#添加密钥到ssh-agent" class="headerlink" title="添加密钥到ssh-agent"></a>添加密钥到ssh-agent</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="添加生成的SSH-key到ssh-agent"><a href="#添加生成的SSH-key到ssh-agent" class="headerlink" title="添加生成的SSH key到ssh-agent"></a>添加生成的SSH key到ssh-agent</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>登录Github，点击头像下的settings，选择右边的ssh and GPG keys 添加ssh<br>新建一个new ssh key,将生成的id_rsa.pub文件里内容粘贴上面就行啦</p>
<p>测试是不否添加成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果看到后面显示的是你的git用户名，说明添加成功。</p>
<p>配置Deployment，在其文件夹中，找到_config.yml文件，修改deploy中的repo值（在末尾）<br>repo值是你的github项目中右边Clone or download可以看到</p>
<h2 id="发布项目"><a href="#发布项目" class="headerlink" title="发布项目"></a>发布项目</h2><p>安装自动部署发布工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>发布命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p>发布时会提示输入github帐号和密码（未添加ssh key），提示发布完成</p>
<h3 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h3><p>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">baize.cc</span><br></pre></td></tr></table></figure>

<p>在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。</p>
<p>打开你添加的域名，是否发布成功。</p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>博客</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>梦回徽州-游徽州散记</title>
    <url>/posts/991a.html</url>
    <content><![CDATA[<p>——游徽州散记</p>
<p>2016年12月1日</p>
<hr>
<p>该怎样形容我对一个地方的眷恋呢？ 从古徽州回来已经有一段时间了，还是常常魂牵梦萦，仿佛仍旧致身于徽州的粉墙黛瓦和青山绿水中。 徽州就像一瓶陈年好酒，在亲密接触过后，即使转身离去，依然留下长久的回味。它的民居、园林、水口、牌坊和雕刻，无不张扬出极强的个性色彩，弥漫着生活化的感染力。 只要到了那里，就让人情不自禁想亲近， 我觉得这就是古徽州的魅力吧。</p>
<p>古徽州， 古称歙州、新安，古时由一府六县组成（徽州府： 歙县、休宁县、婺源县、祁门县、 黟县、绩溪县， 除婺源县 1949 年被划入江西省外，其余今皆属安徽省）。 这次徽州之行我们从婺源县开始， 再到黟县、歙县， 循着徽州古村落中纵横交织的古巷行走，凝视着那些高大的马头墙、 粉墙黛瓦，还有潺潺流淌的小溪流水， 像是触摸到了岁月深处的脉络，心中格外宁静。而积淀深厚的徽文化中的石雕、砖雕、木雕、徽州盆景、徽剧等这些极具地域特色的艺术瑰宝，最终造就了钟灵毓秀的徽州。在你不经意间游走的时候，那些古建筑和村落之间就会弥漫出淡淡的书香味， 使人感觉古风浑厚，韵味绵长。</p>
<h2 id="一、石城"><a href="#一、石城" class="headerlink" title="一、石城"></a>一、石城</h2><p><img src="/medias/image-20230317182115133.png" alt="image-20230317182115133"></p>
<p>深秋的石城， 从远处的山上望去，村庄被高大的百年枫树包围着， 清晨的云雾缭绕， 与整个村落的白墙灰瓦交相辉映， 确实是一组美轮美奂的水墨画。 可惜今年雨水过多，石城的天气始终处于灰蒙蒙的状态，看不到阳光，红枫也较往年迟红，所以拍出来的照片效果模糊， 原谅我没有展现出石城十分之一的美。</p>
<h2 id="二、菊径"><a href="#二、菊径" class="headerlink" title="二、菊径"></a>二、菊径</h2><p><img src="/medias/image-20230317182139447.png" alt="image-20230317182139447"></p>
<p>菊径村被称为“ 中国最圆的村落” ， 三面环水， 一面靠山， 是个山水环绕的古村落。 小溪围绕着村庄缓缓流动， 不时出现在河边的三两个妇女悠然自得地浣纱，像一幅优美的画卷落入我的眼帘。 我不禁在想，如果村落周边没有修建公路，没有众多的车辆和游人的打扰， 这该是一个怎样的世外桃源。</p>
<h2 id="三、篁岭"><a href="#三、篁岭" class="headerlink" title="三、篁岭"></a>三、篁岭</h2><p><img src="/medias/image-20230317182203804.png" alt="image-20230317182203804"></p>
<p>篁岭是一个深山峡谷里的山居村落， 当地村民自古就有用竹匾晾晒农作物的习俗，每到秋季，阳光下数百栋错落的民居纷纷晒出一盘盘红黄交错的红辣椒和黄菊， 构成一幅绚丽多彩的“晒秋” 景观，吸引众多摄影爱好者和游人到此游览。</p>
<p><img src="/medias/image-20230317182218233.png" alt="image-20230317182218233"></p>
<p><img src="/medias/image-20230317182225357.png" alt="image-20230317182225357"></p>
<p><img src="/medias/image-20230317182231246.png" alt="image-20230317182231246"></p>
<p><img src="/medias/image-20230317182236295.png" alt="image-20230317182236295"></p>
<p>步入村里最繁华的天街，也是村落最美的地方， 这里有雕刻精美的茶楼、曾经的官厅、古老的戏台和宗祠， 处处都能感受到徽派老宅的沧桑。 走到山上俯视大片绿油油的梯田， 心中生出对明年春季油菜花盛开时美丽景色的倾慕和向往之心。</p>
<h2 id="四、李坑"><a href="#四、李坑" class="headerlink" title="四、李坑"></a>四、李坑</h2><p><img src="/medias/image-20230317182257995.png" alt="image-20230317182257995"></p>
<p><img src="/medias/image-20230317182303094.png" alt="image-20230317182303094"></p>
<p>李坑的韵致在于小桥流水， 那条数百年来依然清澈的小溪穿村而过，溪流之上石拱桥和木桥比比皆是。 本来随便摄入镜头的就是一幅幅恬静的乡村画卷， 但近年来过度的商业开发， 掩藏了这个古村落的淳朴印记， 反而越来越有丽江、阳朔的小资情调，不过应该还是能符合部分游客的口味吧。</p>
<h2 id="五、洪村"><a href="#五、洪村" class="headerlink" title="五、洪村"></a>五、洪村</h2><p><img src="/medias/image-20230317182321228.png" alt="image-20230317182321228"></p>
<p><img src="/medias/image-20230317182327007.png" alt="image-20230317182327007"></p>
<p><img src="/medias/image-20230317182333084.png" alt="image-20230317182333084"></p>
<p>洪村又名长寿村，村里曾经最年长的老人 128 岁， 现在村里可以看到很多九十多岁的老人家。 洪村周围群山环绕，溪水潺潺，风景秀丽，一派世外桃源的景象。虽然比起其他村落，洪村较小，并且古建筑不多， 但没有太多的商业化气息， 始终是古风遗韵，犹为难得。</p>
<h2 id="六、西递"><a href="#六、西递" class="headerlink" title="六、西递"></a>六、西递</h2><p><img src="/medias/image-20230317182353646.png" alt="image-20230317182353646"></p>
<p><img src="/medias/image-20230317182359133.png" alt="image-20230317182359133"></p>
<p>村口屹立的这座牌坊，为胡文光刺史牌坊， 建于明朝万历年间。胡文光生于西递村，于明代嘉靖年间，先后出任万载县的县令、胶州刺史、荆州刺史。在为官期间， 做了不少利国利民的好事，深得朝廷信赖和百姓的拥戴。该牌坊采用典型徽派特色的浮雕、透雕等雕刻手法，细腻繁复、玲珑剔透，充分反映了当时徽雕的精湛水平，堪称明代徽派石坊的代表作。</p>
<p><img src="/medias/image-20230317182412182.png" alt="image-20230317182412182"></p>
<p>作为世界文化遗产的西递，建筑风貌保存的依然完好。具有代表性的粉墙黛瓦， 历经寂寥漫长的岁月， 远离外界的喧嚣， 在这里，时间仿佛是静止的。</p>
<p>西递自古崇尚教育，历史上出过百余位官员，其中五品以上的官员多达七十余个，可见西递古人对自己后代刻苦攻读、积极上进， 以荣获功名为目标的教育理念。</p>
<p><img src="/medias/image-20230317182445526.png" alt="image-20230317182445526"></p>
<p><img src="/medias/image-20230317182451404.png" alt="image-20230317182451404"></p>
<p><img src="/medias/image-20230317182456899.png" alt="image-20230317182456899"></p>
<p>村中建于清康熙年间的胡文照大夫第，最值得一看的是左侧建起的一座飞檐翘角，玲珑飘逸的临街阁楼，也就是“ 小姐绣楼”。古时小姐抛绣球的地方，不像通常民居那样的拥挤，反倒在墙前留出一块空地，打破了传统的高墙深院的封闭式民宅制式，有人说这体现了为官的主人“退一步海阔天空” 的想法。</p>
<h2 id="七、徽州古城"><a href="#七、徽州古城" class="headerlink" title="七、徽州古城"></a>七、徽州古城</h2><p><img src="/medias/image-20230317182514354.png" alt="image-20230317182514354"></p>
<p><img src="/medias/image-20230317182519657.png" alt="image-20230317182519657"></p>
<p>徽州古城位于歙县，始建于秦朝，唐代以后成为古徽州府治所在地。 古城不大， 靠近东谯楼的“许国石坊” ，是古城里浏览的精华部分。它建于明万历十二年（公元 1584 年），石坊有八根柱子， 横截呈“ 口” 字型，是立体的结构， 外部的四个面和内部的四个面都可以观摩， 柱脚有十二只石狮坐镇， 上部的石雕精美绝伦。中国目前这样的古牌坊仅此一座，石牌坊主人许国三朝元老的显贵身份可见一斑。</p>
<h2 id="八、渔梁古坝"><a href="#八、渔梁古坝" class="headerlink" title="八、渔梁古坝"></a>八、渔梁古坝</h2><p><img src="/medias/image-20230317182542386.png" alt="image-20230317182542386"></p>
<p> 在徽州古城旁边的练江边上，有一条古代街衢，名字叫新安古道， 早期的渔梁商埠码头就在古道下方。 渔梁码头有一个被称作“ 东部都江堰” 的古坝，是练江中的滚水石坝，诞生在隋唐时期，现为明代重建， 是徽州古代最伟大的水利工程。 主要的作用是蓄上游之水，缓坝下之流。无论灌溉、行舟、放伐、 抗洪，都可兼而利之。</p>
<p><img src="/medias/image-20230317182556464.png" alt="image-20230317182556464"></p>
<p>古坝旁边的渔梁老街由于没有经过开发，基本上保持了原有的风貌。街道依河而建，蜿蜒曲折二华里有余，清一色旧式门板店面和鹅卵石路面，各种店号、庄号， 依稀可以看出当时徽商货运的繁华情景。</p>
<h2 id="九、宏村"><a href="#九、宏村" class="headerlink" title="九、宏村"></a>九、宏村</h2><p>最后，请允许我用较长的篇幅描述我心中最具徽州文化特色的宏村， 不过对于它的印象，恐怕不能以这短短的文字全部表达出来，只能稍作概述，以解我内心深处对它的向往之情。</p>
<p>仿生学作为 20 世纪才兴起的一门学科， 但早在 500 年前已经被宏村的祖先运用到自己的生活当中，实在是不可想象的事情。但它恰恰存在着。跟徽州常见的其他水系环绕的村落不同，宏村是唯一一个以“ 山为牛头、树为牛角、屋为牛身、桥为牛脚” 的村落。 站在高处俯视，整个村落恰如一头牛安详地卧在溪边。 整个村落的建筑就是按照从上往下流的河水走向而建立起来的， 当时聘请了著名的地理风水先生何可达，对村庄进行布局规划，历时10 年，完成了引水进村入户、 建成牛形村落的总体设计建造。</p>
<p><img src="/medias/image-20230317182620483.png" alt="image-20230317182620483"></p>
<p><img src="/medias/image-20230317182625810.png" alt="image-20230317182625810"></p>
<p><img src="/medias/image-20230317182631461.png" alt="image-20230317182631461"></p>
<p>“ 南湖” 是这个村庄的点晴之作。作为进村的第一处，站在南湖边上，看着身边绿柳拂面，拱桥洁净若画， 耳边响起了清代诗人胡成俊的诗词：“ 何事就此卜邻居， 花月南湖画不及。浣汲未妨溪路远 ， 家家门卷有清泉。”</p>
<p><img src="/medias/image-20230317182642923.png" alt="image-20230317182642923"></p>
<p><img src="/medias/image-20230317182648309.png" alt="image-20230317182648309"></p>
<p>“月沼” 位于村落的中间，是村民在一眼泉水上开挖而成的水塘。为了避开“ 月满则亏” 的说法，在开掘时就有意挖成半月形， 志在给子孙后代留下发展的空间。</p>
<p>阳光下， 月沼内青砖瓦舍，叠影重重，感觉时间是静止的，历史是停滞的。</p>
<p><img src="/medias/image-20230317182704862.png" alt="image-20230317182704862"></p>
<p><img src="/medias/image-20230317182710359.png" alt="image-20230317182710359"></p>
<p><img src="/medias/image-20230317182715047.png" alt="image-20230317182715047"></p>
<p>徽州民居建筑有一种强烈的、优美的韵律感。洁白的粉墙、灰黑的屋瓦、 飞挑的檐角、层层昂起的马头墙， 呈现出一幅徽派建筑的历史长卷。古徽州建筑多为砖木结构，明代建筑以楼上宽敞为特征。 清代以后，多为一明两暗的三间屋和一明四暗的四合屋。一屋多进。</p>
<p>大门饰石雕砖刻，门楼重檐飞角，各进皆开天井， 天井采光、通风及与外界沟通。窗扇基本都是镂空花雕，既注意光源又有利于空气流通。 雨水通过天窗落入室内水槽流到阴沟， 俗称“ 肥水不流外人田” ，是徽派建筑的主要特征之一。 外墙很少开窗， 各进有隔间墙，四周高筑防火墙（即马头墙）。</p>
<p><img src="/medias/image-20230317182726112.png" alt="image-20230317182726112"></p>
<p><img src="/medias/image-20230317182730551.png" alt="image-20230317182730551"></p>
<p><img src="/medias/image-20230317182735586.png" alt="image-20230317182735586"></p>
<p><img src="/medias/image-20230317182741441.png" alt="image-20230317182741441"></p>
<p>明初，徽派木雕已初具规模，承袭秦汉遗风，风格简朴。清以后， 徽派木雕渐趋细腻、 繁复、精巧，手法从一到二层浅浮雕发展到八九层的高深浮雕，甚至有些雕刻可以开关， 狮子和麒麟的眼球能转动。 雕刻工匠在创作时取民族文化与徽商乡绅审美心理相结合，在木雕作品上反映出徽州人对美好生活的追求和向往。</p>
<p><img src="/medias/image-20230317182752916.png" alt="image-20230317182752916"></p>
]]></content>
      <categories>
        <category>游记散记</category>
      </categories>
      <tags>
        <tag>徽州</tag>
        <tag>游记</tag>
        <tag>徽州散记</tag>
      </tags>
  </entry>
  <entry>
    <title>如何重置jumpserver管理员密码</title>
    <url>/posts/96f0.html</url>
    <content><![CDATA[<h2 id="0x01-重置管理员密码"><a href="#0x01-重置管理员密码" class="headerlink" title="0x01 重置管理员密码"></a>0x01 重置管理员密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理密码忘记了或者重置管理员密码</span></span><br><span class="line">$ <span class="built_in">source</span> /opt/py3/bin/activate</span><br><span class="line">$ <span class="built_in">cd</span> /opt/jumpserver/apps</span><br><span class="line">$ python manage.py changepassword  admin</span><br><span class="line"><span class="comment">#输入新的密码</span></span><br><span class="line">$ password</span><br></pre></td></tr></table></figure>

<h2 id="0x02-新建超级管理账号（死而复生）"><a href="#0x02-新建超级管理账号（死而复生）" class="headerlink" title="0x02 新建超级管理账号（死而复生）"></a>0x02 新建超级管理账号（死而复生）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建超级用户的命令如下命令</span></span><br><span class="line">$ python manage.py createsuperuser --username=user --email=user@domain.com</span><br><span class="line"><span class="comment"># 设备新用户密码</span></span><br><span class="line">$ password:</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>jumpserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统安装之后，如何调节CPU性能策略</title>
    <url>/posts/efc.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><p>1、ondemand：系统默认的超频模式，按需调节，内核提供的功能，不是很强大，但有效实现了动态频率调节，平时以低速方式运行，当系统负载提高时候自动提高频率。以这种模式运行不会因为降频造成性能降低，同时也能节约电能和降低温度。一般官方内核，还有CM7的默认的方式都是ondemand。<br>流畅度： 一般，流畅</p>
</li>
<li><p>2、interactive：交互模式，直接上最高频率，然后看CPU负荷慢慢降低，比较耗电。<br>流畅度： 最高，极流畅<br>Interactive 是以 CPU 排程数量而调整频率，从而实现省电。<br>InteractiveX 是以 CPU 负载来调整 CPU 频率，不会过度把频率调低。所以比 Interactive 反应好些，但是省电的效果一般</p>
</li>
<li><p>3、conservative：保守模式，类似于ondemand，但调整相对较缓，想省电就用他吧。Google官方内核，kang内核默认模式。<br>流畅度： 高，流畅</p>
</li>
<li><p>4、smartass：聪明模式，是I和C模式的升级，该模式在比i模式不差的响应的前提下会做到了更加省电<br>流畅度： 最高，流畅</p>
</li>
<li><p>5、performance：性能模式！只有最高频率，从来不考虑消耗的电量，性能没得说，但是耗电量…<br>流畅度：还需要说么？还有比这种模式更流畅的吗？</p>
</li>
<li><p>6、powersave 省电模式，通常以最低频率运行，打不死我也不用。<br>流畅度： 极低</p>
</li>
<li><p>7、userspace：用户自定义模式，系统将变频策略的决策权交给了用户态应用程序，并提供了相应的接口供用户态应用程序调节CPU 运行频率使用。也就是长期以来都在用的那个模式。可以通过手动编辑配置文件进行配置<br>流畅度：根据设置而定</p>
</li>
<li><p>8、Hotplug：类似于ondemand, 但是cpu会在关屏下尝试关掉一个cpu，并且带有deep sleep，比较省电。<br>流畅度：一般，流畅</p>
</li>
</ul>
<h2 id="Linux下设置相关参数"><a href="#Linux下设置相关参数" class="headerlink" title="Linux下设置相关参数"></a>Linux下设置相关参数</h2><h3 id="设置performance模式"><a href="#设置performance模式" class="headerlink" title="设置performance模式"></a>设置performance模式</h3><h4 id="CentOS7下配置"><a href="#CentOS7下配置" class="headerlink" title="CentOS7下配置"></a>CentOS7下配置</h4><p>首先，需要知道Linux有一个叫做cpupower的工具集，用来检查和调整处理器的能耗相关的一些features。其中的一个工具叫做“frequency-set”，可以用来调整cpu运行频率。</p>
<p>使用下面的命令来查看当下可用的drivers，即governors:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cpupower frequency-info --governors</span><br><span class="line"></span><br><span class="line"><span class="comment"># cpupower -c all frequency-info --governors</span></span><br><span class="line">analyzing CPU 0:</span><br><span class="line">   available cpufreq governors: performance powersave</span><br><span class="line"></span><br><span class="line">analyzing CPU 1:</span><br><span class="line">   available cpufreq governors: performance powersave</span><br></pre></td></tr></table></figure>

<p>光手动的用<code>cpupower –c all frequency-set –g performance</code> 来修改是不够的，我们需要让这个配置在开机的时候就生效。所以，需要创建一个由systemd管理的服务，让这个服务在开机的时候就自动运行。</p>
<p>运行下面的命令，直接修改<code>/etc/systemd/system/cpupower.service</code>这个文件，使得这个服务开机就运行一次（oneshot）, 不始终保持运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF | sudo tee /etc/systemd/system/cpupower.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=CPU powersave</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=oneshot</span></span><br><span class="line"><span class="string">ExecStart=/usr/bin/cpupower -c all frequency-set -g powersave</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>问题解决。</p>
<h4 id="其它办法"><a href="#其它办法" class="headerlink" title="其它办法"></a>其它办法</h4><p>方法一：在bios(cpu 选项，或者电源管理选项)直接配置为max performance（我的系统无法设置），重启即可；</p>
<p>方法二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install cpupowerutils</span><br><span class="line">cpupower -c all frequency-set -g performance  <span class="comment">#（不用安装，自带cpupower 命令）</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">cpupower frequency-set -g performance</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service cpuspeed stop</span><br></pre></td></tr></table></figure>

<p>这里按需重启系统，最好试一下重启能不能生效，有的服务器会在重启之后失效，必须在bios里面设置</p>
<h3 id="查看当前governor"><a href="#查看当前governor" class="headerlink" title="查看当前governor"></a>查看当前governor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor</span><br><span class="line"><span class="comment">#powersave或者performance</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo | grep -i <span class="string">&quot;cpu mhz&quot;</span></span><br><span class="line"><span class="comment">#显示每个CPU的当前运行频率</span></span><br><span class="line">cpupower frequency-info</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安全加固措施方案之密码加固</title>
    <url>/posts/d931.html</url>
    <content><![CDATA[<h2 id="0x01-准备工作："><a href="#0x01-准备工作：" class="headerlink" title="0x01 准备工作："></a>0x01 准备工作：</h2><p>安装 PAM 的bai cracklib 模块，cracklib 能提供额外的密码du检查能力。</p>
<h3 id="可用参数说明"><a href="#可用参数说明" class="headerlink" title="可用参数说明"></a>可用参数说明</h3><ul>
<li><p><em>debug</em> 此选项使模块的信息写入到syslog（3），显示模块的行为（此选项不写密码信息到日志文件）。</p>
</li>
<li><p><em>type&#x3D;XXX</em> 默认的动作是模块使用以下提示时，要求口令：“新的UNIX密码：“和”重新输入UNIX密码：“。默认的Word UNIX可以被替换为这个选项。</p>
</li>
<li><p><em>retry&#x3D;N</em> 改变输入密码的次数，默认值是1。就是说，如果用户输入的密码强度不够就退出。可以使用这个选项设置输入的次数，以免一切都从头再来。</p>
</li>
<li><p><em>difok&#x3D;N</em> 默认值为10。这个参数设置允许的新、旧密码相同字符的个数。不过，如果新密码中1&#x2F;2的字符和旧密码不同，则新密码被接受。</p>
</li>
<li><p><em>difignore&#x3D;N</em> 多少个字符的密码应收到difok将被忽略。默认为23</p>
</li>
<li><p><em>minlen&#x3D;N</em> 新的最低可接受的大小密码（加一个，如果没有禁用学分这是默认值）。除了在新密码的字符数，贷方（在长度+1），给出了各种人物的不同种类（其他，大写，小写，数字）。此参数的默认值是9，它是一个老式的UNIX密码的字符相同类型的所有好，但可能过低，利用一个MD5的系统增加安全性。请注意，有一个在Cracklib本身长度的限制，一“的方式太短“4极限是硬编码和定义的限制（6），将不参考minlen检查对。如果你想允许密码短短5个字符，你不应该使用这个模块。</p>
</li>
<li><p><em>dcredit&#x3D;N</em> 限制新密码中至少有多少个数字。</p>
</li>
<li><p><em>ucredit&#x3D;N</em> 限制新密码中至少有多少个大写字符。</p>
</li>
<li><p><em>lcredit&#x3D;N</em> 限制新密码中至少有多少个小写字符。</p>
</li>
<li><p><em>ocredit&#x3D;N</em> 限制新密码中至少有多少个其它的字符。</p>
</li>
</ul>
<h2 id="0x02-具体操作："><a href="#0x02-具体操作：" class="headerlink" title="0x02 具体操作："></a>0x02 具体操作：</h2><p>Debian、Ubuntu 或 Linux Mint 系统上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install libpam-cracklib</span><br></pre></td></tr></table></figure>

<p>CentOS、Fedora、RHEL 系统已经默认安装了 cracklib PAM模块，所以在这些系统上无需执行上面的操作。</p>
<p>为了强制实施密码策略，需要修改 &#x2F;etc&#x2F;pam.d 目录下的 PAM 配置文件。一旦修改，策略会马上生效。<br>注意：此教程中的密码策略只对非 root 用户有效，对 root 用户无效。</p>
<p>策略设置：</p>
<h3 id="禁止使用旧密码"><a href="#禁止使用旧密码" class="headerlink" title="禁止使用旧密码"></a>禁止使用旧密码</h3><p>找到同时有 “password” 和 “pam_unix.so” 字段并且附加有 “remember&#x3D;5” 的那行，它表示禁止使用最近用过的5个密码（己使用过的密码会被保存在 &#x2F;etc&#x2F;security&#x2F;opasswd 下面）。</p>
<p>Debian、Ubuntu 或 Linux Mint 系统上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/common-password</span><br><span class="line">password [success=1 default=ignore] pam_unix.so obscure sha512 remember=5</span><br></pre></td></tr></table></figure>

<p>CentOS、Fedora、RHEL 系统上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/system-auth</span><br><span class="line">password sufficient pamunix.so sha512 shadow nullok tryfirstpass useauthtok remember=5</span><br></pre></td></tr></table></figure>

<h3 id="设置最短密码长度"><a href="#设置最短密码长度" class="headerlink" title="设置最短密码长度"></a>设置最短密码长度</h3><p>找到同时有 “password” 和 “pam_cracklib.so” 字段并且附加有 “minlen&#x3D;10” 的那行，它表示最小密码长度为（10 - 类型数量）。这里的 “类型数量” 表示不同的字符类型数量。PAM 提供4种类型符号作为密码（大写字母、小写字母、数字和标点符号）。如果密码同时用上了这4种类型的符号，并且 minlen 设为10，那么最短的密码长度允许是6个字符。</p>
<p>Debian、Ubuntu 或 Linux Mint 系统上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/common-password</span><br><span class="line">password requisite pam_cracklib.so retry=3 minlen=10 difok=3</span><br></pre></td></tr></table></figure>

<p>CentOS、Fedora、RHEL 系统上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/system-auth</span><br><span class="line">password requisite pam_cracklib.so retry=3 difok=3 minlen=10</span><br></pre></td></tr></table></figure>

<h3 id="设置密码复杂度"><a href="#设置密码复杂度" class="headerlink" title="设置密码复杂度"></a>设置密码复杂度</h3><p>找到同时有 “password” 和 “pam_cracklib.so” 字段并且附加有 “ucredit&#x3D;-1 lcredit&#x3D;-2 dcredit&#x3D;-1 ocredit&#x3D;-1” 的那行，表示密码必须至少包含一个大写字母（ucredit），两个小写字母（lcredit），一个数字（dcredit）和一个标点符号（ocredit）。</p>
<p>Debian、Ubuntu 或 Linux Mint 系统上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/common-password</span><br><span class="line">password requisite pam_cracklib.so retry=3 minlen=10 difok=3 ucredit=-1 lcredit=-2 dcredit=-1 ocredit=-1</span><br></pre></td></tr></table></figure>

<p>CentOS、Fedora、RHEL 系统上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/system-auth</span><br><span class="line">password requisite pam_cracklib.so retry=3 difok=3 minlen=10 ucredit=-1 lcredit=-2 dcredit=-1 ocredit=-1</span><br><span class="line"><span class="comment">#允许有3个新、旧密码相同字符，最少长度10位，至少包含1位大写字母，2位小写字母，1位数字1个字符。</span></span><br></pre></td></tr></table></figure>

<h3 id="设置密码过期期限"><a href="#设置密码过期期限" class="headerlink" title="设置密码过期期限"></a>设置密码过期期限</h3><p>编辑 &#x2F;etc&#x2F;login.defs 文件，可以设置当前密码的有效期限，具体变量如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/login.defs</span><br><span class="line">PASSMAXDAYS 150</span><br><span class="line">PASSMINDAYS 0</span><br><span class="line">PASSWARNAGE 7</span><br></pre></td></tr></table></figure>

<p>这些设置要求用户每6个月改变密码，并且会提前7天提醒用户密码快到期了。</p>
<p>如果想为每个用户设置不同的密码期限，使用 chage 命令。下面的命令可以查看某个用户的密码限期：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chage -l xmoduloLast password change : Dec 30, 2013 Password expires : never Password inactive : never Account expires : never Minimum number of days between password change : 0 Maximum number of days between password change : 99999 Number of days of warning before password expires : 7</span><br></pre></td></tr></table></figure>

<p>默认情况下，用户的密码永不过期。</p>
<h3 id="下面的命令用于修改-xmodulo-用户的密码期限："><a href="#下面的命令用于修改-xmodulo-用户的密码期限：" class="headerlink" title="下面的命令用于修改 xmodulo 用户的密码期限："></a>下面的命令用于修改 xmodulo 用户的密码期限：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chage -E 6/30/2014 -m 5 -M 90 -I 30 -W 14 xmodulo</span><br></pre></td></tr></table></figure>

<p>上面的命令将密码期限设为2014年6月3日。另外，修改密码的最短周期为5天，最长周期为90天。密码过期前14天会发送消息提醒用户，过期后帐号会被锁住30天。</p>
<p>设置完后，验证效果。</p>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>主机加固</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 存储扩容，分区扩容</title>
    <url>/posts/fa9f.html</url>
    <content><![CDATA[<h3 id="0x01-查看系统磁盘"><a href="#0x01-查看系统磁盘" class="headerlink" title="0x01 查看系统磁盘"></a>0x01 查看系统磁盘</h3><p>使用<code>lsblk</code>可查看分区情况与磁盘大小，使用 <code>df -h</code> 命令，可以看到系统的磁盘使用情况，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  8.6M  3.9G   1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda2      xfs        92G  3.2G   89G   4% /</span><br><span class="line">tmpfs          tmpfs     783M     0  783M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<h3 id="0x02-Linux-磁盘扩容情况"><a href="#0x02-Linux-磁盘扩容情况" class="headerlink" title="0x02 Linux 磁盘扩容情况"></a>0x02 Linux 磁盘扩容情况</h3><p>磁盘扩容时会有几种情况</p>
<ol>
<li>横向扩容（最后一个分区扩容）</li>
<li>LVM分区扩容</li>
</ol>
<p>横向扩容需要扩容分区与未分区空间相邻，或最后一个分区 </p>
<p>LVM 分区扩容。主要的扩容方法有两种：</p>
<ul>
<li><p>通过空余的磁盘进行扩容，这个方法比较简单，不会对原有数据有影响。</p>
</li>
<li><p>将其他 LVM 分区空间取出一部分给需要扩容的 LVM 分区。</p>
</li>
</ul>
<p>下面就不同情况分别具体介绍。</p>
<h3 id="0x03-LVM分区利用空余磁盘扩容"><a href="#0x03-LVM分区利用空余磁盘扩容" class="headerlink" title="0x03 LVM分区利用空余磁盘扩容"></a>0x03 LVM分区利用空余磁盘扩容</h3><p>利用硬盘中空闲空间与添加别一个硬盘扩容基本相同，首先使用磁盘分区工具创建一个分区，再使用以下方式扩容。</p>
<ol>
<li><p>首先使用命令 fdisk -l 查看磁盘情况，此系统有两块硬盘， &#x2F;dev&#x2F;sda 21.5G， &#x2F;dev&#x2F;sdb 21.5G </p>
</li>
<li><p>创建 pv ,通过 pvcreate 命令将磁盘&#x2F;dev&#x2F;sdb 创建为一个系统 PV  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdb1</span><br></pre></td></tr></table></figure>


</li>
<li><p>将 PV &#x2F;dev&#x2F;sdb 添加到卷组 VolGroup 中。磁盘已经添加到 VolGroup ，而且卷组的空间增加了 20G。使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vgextend VolGroup /dev/sdb1 </span><br></pre></td></tr></table></figure>

</li>
<li><p>为&#x2F; 添加 10G 的空间。使用命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvextend -r -L +10G /dev/mapper/VolGroup-lv_root</span><br><span class="line"><span class="comment">#使用 -r 添加后自动刷新，不再需要第5步</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>逻辑卷扩展后并不会马上生效，需要使用“resize2fs” 命令重新加载逻辑卷的大小。使用命令 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/VolGroup/lv_root</span><br></pre></td></tr></table></figure></li>
</ol>
<p>再使用命令 df -h 查看发现&#x2F;已经多了 10G。  </p>
<h3 id="0x04-利用其他-LVM-分区空余空间进行扩容"><a href="#0x04-利用其他-LVM-分区空余空间进行扩容" class="headerlink" title="0x04 利用其他 LVM 分区空余空间进行扩容"></a>0x04 利用其他 LVM 分区空余空间进行扩容</h3><ol>
<li><p>使用 df -h 查看每个分区的使用情况。如下，发现&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 容量很充裕，本次扩容通过减少</p>
<p>&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 的空间给&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_root。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure>


</li>
<li><p>卸载&#x2F;home  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /home</span><br></pre></td></tr></table></figure>

<p>umount &#x2F;home 如果提示无法卸载，因为有进程占用&#x2F;home，使用如下命令来终止占用进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fuser -m /home</span><br></pre></td></tr></table></figure>

<p>如果依然无法卸载，使用以下命令：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount -l /home</span><br></pre></td></tr></table></figure>


</li>
<li><p>调整&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 分区大小<br>需要先进行磁盘检测 ，输入命令 e2fsck -f &#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home。 注意：遇到 Abort&lt; y &gt;? 这边输入的是 n，才能继续进行。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e2fsck -f /dev/mapper/VolGroup-lv_home</span><br></pre></td></tr></table></figure>

<p> 然后输入命令 resize2fs -p &#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 100G，进行磁盘重订大小。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs -p /dev/mapper/VolGroup-lv_home 100G</span><br></pre></td></tr></table></figure>


</li>
<li><p>重新挂载&#x2F;home  </p>
<p>重新挂载后，输入 df -h，发现&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 已经改变。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /home</span><br><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure>


</li>
<li><p>设置空闲空间<br>使用命令 vgdisplay，可以看到 Free PE&#x2F;Size 25760 &#x2F; 100.62 GiB，有了 100G 的空余空间。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvreduce -L 100G /dev/mapper/VolGroup-lv_home</span><br><span class="line"><span class="comment">## 查询lvg空闲容量</span></span><br><span class="line">vgdisplay</span><br></pre></td></tr></table></figure>


</li>
<li><p>把闲置空间挂在到根目录下  </p>
<p>刚才我们查询到还有 100.62G 的空闲空间，这时我们扩容空间时可以输入空间大小，也可以输入 +100%FREE 来表示扩容所以空闲容量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/mapper/VolGroup-lv_root</span><br></pre></td></tr></table></figure>

<p>使用命令 resize2fs -p &#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_root， 可以不用重启，就显示最新的磁盘空间。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs -p /dev/mapper/VolGroup-lv_root</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看结果 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="0x05-利用parted-扩容分区（非活动分区）"><a href="#0x05-利用parted-扩容分区（非活动分区）" class="headerlink" title="0x05 利用parted 扩容分区（非活动分区）"></a>0x05 利用parted 扩容分区（非活动分区）</h3><p>parted 查看分区情况，只可扩容最后一个分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/vda <span class="built_in">print</span></span><br><span class="line">parted /dev/vda</span><br></pre></td></tr></table></figure>

<p>使用 resizepart 扩容最后一个分区，id为最后一个分区编号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resizepart <span class="built_in">id</span></span><br><span class="line">End? [21.5GB]? 100%</span><br></pre></td></tr></table></figure>

<p>结束位置大小输入 100% ，说明把后面所有空闲容量都加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span></span><br></pre></td></tr></table></figure>

<p>这时我们查看到已扩容完成</p>
<h3 id="0x06-扩容GPT分区-（-gdisk-工具-）"><a href="#0x06-扩容GPT分区-（-gdisk-工具-）" class="headerlink" title="0x06 扩容GPT分区 （ gdisk 工具 ）"></a>0x06 扩容GPT分区 （ gdisk 工具 ）</h3><p>使用 parted 扩容活动分区时会提示卸载分区，这时我们就需要使用到gdisk 分区工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gdisk</span><br><span class="line"><span class="comment"># 安装 gdisk</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># parted /dev/vda</span></span><br><span class="line"><span class="comment"># 输入 p 查看分区信息，这时会提示错误，输入 Fix 修复分区信息，q 退出。</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line"><span class="comment"># 刷新存储信息</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># gdisk /dev/vda</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048         1026047   500.0 MiB   EF00  EFI System Partition</span><br><span class="line">   2         1026048         1640447   300.0 MiB   0700</span><br><span class="line">   3         1640448        41936895   19.2 GiB    0700</span><br><span class="line"><span class="comment">#删除原分区</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): d</span><br><span class="line">Partition number (1-3): 3</span><br><span class="line"><span class="comment">#新建分区，序号使用原分区序号，一路回车</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (3-128, default 3): 3</span><br><span class="line"><span class="comment">#查看分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048         1026047   500.0 MiB   EF00  EFI System Partition</span><br><span class="line">   2         1026048         1640447   300.0 MiB   0700</span><br><span class="line">   3         1640448       104857566   49.2 GiB    8300  Linux filesystem</span><br><span class="line"><span class="comment">#修改分区类型</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Partition number (1-3): 3</span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300): 0700</span><br><span class="line"><span class="comment">#检查分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line"><span class="comment">#保存分区</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (Y/N): y</span><br><span class="line"><span class="comment">#写入分区信息</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe /dev/vda3</span></span><br><span class="line"><span class="comment">#刷新存储信息，查看分区情况</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># lsblk</span></span><br><span class="line"><span class="comment">#更新扩容信息</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># xfs_growfs /dev/vda3</span></span><br></pre></td></tr></table></figure>

<h3 id="0x07-扩容mbr分区（fdisk工具）"><a href="#0x07-扩容mbr分区（fdisk工具）" class="headerlink" title="0x07  扩容mbr分区（fdisk工具）"></a>0x07  扩容mbr分区（fdisk工具）</h3><p>直接使用命令扩容系统分区会提示错误，这时我们可以使用 fdisk 扩容分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 刷新硬件信息</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line"><span class="comment">## 查看磁盘情况</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1 1024M  0 rom</span><br><span class="line">sr1     11:1    1 1024M  0 rom</span><br><span class="line">vda    253:0    0  100G  0 disk</span><br><span class="line">├─vda1 253:1    0    8G  0 part [SWAP]</span><br><span class="line">└─vda2 253:2    0   22G  0 part /</span><br><span class="line"></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># fdisk /dev/vda</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"><span class="comment">##查看原分区情况</span></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2   *    16779264    62914559    23067648   83  Linux</span><br><span class="line"><span class="comment">##删除分区，删除分区后不可以保存</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): d</span><br><span class="line">Partition number (1,2, default 2): 2</span><br><span class="line">Partition 2 is deleted</span><br><span class="line"><span class="comment">##重新创建分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (2-4, default 2): 2</span><br><span class="line">First sector (16779264-209715199, default 16779264):</span><br><span class="line">Using default value 16779264</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (16779264-209715199, default 209715199):</span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 2 of <span class="built_in">type</span> Linux and of size 92 GiB is <span class="built_in">set</span></span><br><span class="line"><span class="comment">## 再次查看分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2        16779264   209715199    96467968   83  Linux</span><br><span class="line"><span class="comment">## 检查分区是不否有错误</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line">Remaining 2047 unallocated 512-byte sectors</span><br><span class="line"><span class="comment">## 保存分区信息</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"><span class="comment">## 刷新存储文件，centos6 使用 kpartx /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe /dev/vda2</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1 1024M  0 rom</span><br><span class="line">sr1     11:1    1 1024M  0 rom</span><br><span class="line">vda    253:0    0  100G  0 disk</span><br><span class="line">├─vda1 253:1    0    8G  0 part [SWAP]</span><br><span class="line">└─vda2 253:2    0   92G  0 part /</span><br><span class="line"><span class="comment">## lsblk 可以查看到分区已扩容，这时可看到分区类型为xfs，需要自动扩展XFS文件系统到最大的可用大小。如为 ext4 等分区请使用 resize2fs /dev/vda2</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># xfs_growfs /dev/vda2</span></span><br><span class="line">meta-data=/dev/vda2              isize=512    agcount=4, agsize=1441728 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=5766912, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal               bsize=4096   blocks=2815, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 5766912 to 24116992</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  8.6M  3.9G   1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda2      xfs        92G  3.2G   89G   4% /</span><br><span class="line">tmpfs          tmpfs     783M     0  783M   0% /run/user/0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux磁盘分区并挂载</title>
    <url>/posts/76b2.html</url>
    <content><![CDATA[<h2 id="0x01-查看系统磁盘"><a href="#0x01-查看系统磁盘" class="headerlink" title="0x01 查看系统磁盘"></a>0x01 查看系统磁盘</h2><p>使用<code>lsblk</code>可查看分区情况与磁盘大小，使用 <code>df -h</code> 命令，可以看到系统的磁盘使用情况，</p>
<p>如需要挂载 <code>/dev/sdb</code> 此存储到 <code>/data</code> 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##查看设备中磁盘</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="comment">##查看磁盘挂载与使用情况</span></span><br><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  8.6M  3.9G   1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda2      xfs        92G  3.2G   89G   4% /</span><br><span class="line">tmpfs          tmpfs     783M     0  783M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<h2 id="0x02-Linux-磁盘分区"><a href="#0x02-Linux-磁盘分区" class="headerlink" title="0x02 Linux 磁盘分区"></a>0x02 Linux 磁盘分区</h2><h3 id="标准分区挂载"><a href="#标准分区挂载" class="headerlink" title="标准分区挂载"></a>标准分区挂载</h3><h4 id="fdisk-分区工具"><a href="#fdisk-分区工具" class="headerlink" title="fdisk 分区工具"></a>fdisk 分区工具</h4><p>磁盘少于2T时可以使用<code>fdisk</code>分区，大于2T需要使用 <code>gdisk</code>工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 刷新硬件信息</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">## 查看磁盘情况</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line"><span class="comment">##新建分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># fdisk /dev/vda</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (2-4, default 2): 2</span><br><span class="line">First sector (16779264-209715199, default 16779264):</span><br><span class="line">Using default value 16779264</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (16779264-209715199, default 209715199):</span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 2 of <span class="built_in">type</span> Linux and of size 92 GiB is <span class="built_in">set</span></span><br><span class="line"><span class="comment">## 再次查看分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2        16779264   209715199    96467968   83  Linux</span><br><span class="line"><span class="comment">## 检查分区是不否有错误</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line">Remaining 2047 unallocated 512-byte sectors</span><br><span class="line"><span class="comment">## 保存分区信息</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"><span class="comment">## 刷新存储文件，centos6 使用 kpartx /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##格式化分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/vda2</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/vda2    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure>



<h4 id="gdisk-分区工具"><a href="#gdisk-分区工具" class="headerlink" title="gdisk 分区工具"></a>gdisk 分区工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##安装gdisk包</span></span><br><span class="line">yum install gdisk</span><br><span class="line"><span class="comment">##刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># gdisk /dev/vda</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (3-128, default 3): </span><br><span class="line"><span class="comment">#查看分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048         1026047   500.0 MiB   EF00  EFI System Partition</span><br><span class="line">   2         1026048         1640447   300.0 MiB   0700</span><br><span class="line">   3         1640448       104857566   49.2 GiB    8300  Linux filesystem</span><br><span class="line"><span class="comment">#修改分区类型</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Partition number (1-3): 3</span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300): 0700</span><br><span class="line"><span class="comment">#检查分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line"><span class="comment">#保存分区</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (Y/N): y</span><br><span class="line"><span class="comment">#写入分区信息</span></span><br><span class="line"><span class="comment">##刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##格式化分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/vda2</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/vda2    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure>

<h4 id="parted-分区工具"><a href="#parted-分区工具" class="headerlink" title="parted 分区工具"></a>parted 分区工具</h4><p>linux操作系统下有fdisk和parted两个分区工具，超过2T的磁盘只能使用parted进行分区，fdisk和parted分区方法也有很大的不同</p>
<p>使用<code>parted</code>分区工具需要注意磁盘数据，运行命令就已经开始执行分区操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># parted  /dev/sdb</span></span><br><span class="line"><span class="comment">##转换磁盘为gpt</span></span><br><span class="line">(parted)mklable gpt</span><br><span class="line"><span class="comment">##创建分区,0为开始分区大小，2T为结束分区大小</span></span><br><span class="line">(parted)mkpart primary 0 2T</span><br><span class="line">(parted)p</span><br><span class="line">(parted)q</span><br><span class="line"><span class="comment">##刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##格式化分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/vda2</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/vda2    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure>



<h3 id="LVM分区挂载"><a href="#LVM分区挂载" class="headerlink" title="LVM分区挂载"></a>LVM分区挂载</h3><p>由于传统的磁盘管理不能对磁盘进行磁盘管理，因此诞生了LVM技术，LVM技术最大的特点就是对磁盘进行动态管理。由于LVM的逻辑卷的大小更改可以进行动态调整，且不会出现丢失数据的情况。</p>
<p>LVM（Logic Volume Manager）是逻辑卷管理的简称。它是Linux环境下对磁盘分区管理的一种机制。对于其他的的UNIX（AIX&#x2F;HP&#x2F;SUM)操作系统，以及Windows系统也有类似的磁盘管理软件。</p>
<p>LVM管理的方式非常简单，就是通过将底层的物料磁盘抽象并封装起来，然后以逻辑的方式呈现给上层应用。</p>
<p>首先需要对磁盘分区，再把一个或多个磁盘分区加入pv</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 刷新硬件信息</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">## 查看磁盘情况</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line"><span class="comment">##新建分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># fdisk /dev/vda</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (2-4, default 2): 2</span><br><span class="line">First sector (16779264-209715199, default 16779264):</span><br><span class="line">Using default value 16779264</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (16779264-209715199, default 209715199):</span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 2 of <span class="built_in">type</span> Linux and of size 92 GiB is <span class="built_in">set</span></span><br><span class="line"><span class="comment">## 再次查看分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2        16779264   209715199    96467968   83  Linux</span><br><span class="line"><span class="comment">## 检查分区是不否有错误</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line">Remaining 2047 unallocated 512-byte sectors</span><br><span class="line"><span class="comment">## 保存分区信息</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"><span class="comment">## 刷新存储文件，centos6 使用 kpartx /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##创建pv卷</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># pvcreate /dev/vda2</span></span><br><span class="line"><span class="comment">##创建vg卷组</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vgcreate data /dev/vda2</span></span><br><span class="line"><span class="comment">##创建lv逻辑卷</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lvcreate -l 100%FREE -n data data</span></span><br><span class="line"><span class="comment">##格式化逻辑卷</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/mapper/data-data</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/mapper/data-data    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure>


<hr>
<p><strong>相关链接</strong></p>
<ul>
<li><a href="https://baize.cc/posts/fa9f.html">Linux存储扩容，分区扩容</a></li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux find命令</title>
    <url>/posts/4935.html</url>
    <content><![CDATA[<p>Linux find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find   path   -option   [   -<span class="built_in">print</span> ]   [ -<span class="built_in">exec</span>   -ok   <span class="built_in">command</span> ]   &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明 :"></a>参数说明 :</h4><p>find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。</p>
<p>expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。</p>
<ul>
<li><p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p>
</li>
<li><p>-amin n : 在过去 n 分钟内被读取过</p>
</li>
<li><p>-anewer file : 比文件 file 更晚被读取过的文件</p>
</li>
<li><p>-atime n : 在过去n天内被读取过的文件</p>
</li>
<li><p>-cmin n : 在过去 n 分钟内被修改过</p>
</li>
<li><p>-cnewer file :比文件 file 更新的文件</p>
</li>
<li><p>-ctime n : 在过去n天内被修改过的文件</p>
</li>
<li><p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p>
</li>
<li><p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p>
</li>
<li><p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p>
</li>
<li><p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。-type c : 文件类型是 c 的文件。</p>
</li>
<li><p>d: 目录</p>
</li>
<li><p>c: 字型装置文件</p>
</li>
<li><p>b: 区块装置文件</p>
</li>
<li><p>p: 具名贮列</p>
</li>
<li><p>f: 一般文件</p>
</li>
<li><p>l: 符号连结</p>
</li>
<li><p>s: socket</p>
</li>
<li><p>-pid n : process id 是 n 的文件</p>
</li>
</ul>
<p>你可以使用 ( ) 将运算式分隔，并使用下列运算。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">exp1 -and exp2</span><br><span class="line">! expr</span><br><span class="line">-not expr</span><br><span class="line">exp1 -or exp2</span><br><span class="line">exp1, exp2</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将目前目录及其子目录下所有延伸档名是 c 的文件列出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -name &quot;*.c&quot;</span></span><br></pre></td></tr></table></figure>
<p>将目前目录其其下子目录中所有一般文件列出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -type f</span></span><br></pre></td></tr></table></figure>
<p>将目前目录及其子目录下所有最近 20 天内更新过的文件列出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -ctime -20</span></span><br></pre></td></tr></table></figure>
<p>查找&#x2F;var&#x2F;log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find /var/log -type f -mtime +7 -ok rm &#123;&#125; \;</span></span><br></pre></td></tr></table></figure>
<p>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -type f -perm 644 -exec ls -l &#123;&#125; \;</span></span><br></pre></td></tr></table></figure>
<p>为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find / -type f -size 0 -exec ls -l &#123;&#125; \;</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">服务器磁盘满，一般由大的日志文件导致，需找到大文件并删除。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">find / -size +500M -print0|xargs -0 <span class="built_in">du</span> -m|<span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure>

<p>上述方法从根路径查找，可能列出一些系统文件。可以在这个查找之前先进行一下过滤。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -m -d 1 /|<span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure>

<p>记得写过一个xxx.c的文件，但是忘了放哪里了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name *xxx*.c <span class="comment">#模糊查找下这个文件</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据备份</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>备份</tag>
        <tag>恢复</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 查看服务器远程管理IP(DELL iDrac和HP iLO)</title>
    <url>/posts/7f56.html</url>
    <content><![CDATA[<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y OpenIPMI ipmitool</span><br><span class="line">[root@localhost ~]<span class="comment"># ipmitool lan print</span></span><br><span class="line">Set <span class="keyword">in</span> Progress         : Set Complete</span><br><span class="line">IP Address Source       : Static Address</span><br><span class="line">IP Address              : 10.1.6.200</span><br><span class="line">Subnet Mask             : 255.255.255.0</span><br><span class="line">MAC Address             : e4:72:e2:c8:70:a5</span><br><span class="line">SNMP Community String   : TrapAdmin12<span class="comment">#$</span></span><br><span class="line">IP Header               : TTL=0x40 Flags=0x40 Precedence=0x00 TOS=0x10</span><br><span class="line">Default Gateway IP      : 10.1.6.254</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install ipmitool</span><br><span class="line">[root@localhost ~]<span class="comment"># ipmitool lan print</span></span><br><span class="line">Set <span class="keyword">in</span> Progress         : Set Complete</span><br><span class="line">IP Address Source       : Static Address</span><br><span class="line">IP Address              : 10.1.6.200</span><br><span class="line">Subnet Mask             : 255.255.255.0</span><br><span class="line">MAC Address             : e4:72:e2:c8:70:a5</span><br><span class="line">SNMP Community String   : TrapAdmin12<span class="comment">#$</span></span><br><span class="line">IP Header               : TTL=0x40 Flags=0x40 Precedence=0x00 TOS=0x10</span><br><span class="line">Default Gateway IP      : 10.1.6.254</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>linux主机加固</title>
    <url>/posts/ebe6.html</url>
    <content><![CDATA[<h2 id="0x01-前-言"><a href="#0x01-前-言" class="headerlink" title="0x01 前 言"></a>0x01 前 言</h2><p>Linux系统被应用于大部分企业的服务器上，因此在等保测评中主机加固也是必须要完成的一项环节。<br>由于在之后项目开始要进行主机加固，因此对linux的加固流程进行总结学习。<br>Linux的主机加固主要分为：账号安全、认证授权、协议安全、审计安全。简而言之，就是4A（统一安全管理平台解决方案）。</p>
<p>这边就使用我自己kali的虚拟机进行试验学习。</p>
<h2 id="0x02-基础加固"><a href="#0x02-基础加固" class="headerlink" title="0x02 基础加固"></a>0x02 基础加固</h2><h3 id="口令生存期"><a href="#口令生存期" class="headerlink" title="口令生存期"></a>口令生存期</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/login.defs</span><br><span class="line"><span class="comment">#在此处对密码的长度、时间、过期警告进行修改</span></span><br><span class="line">PASS_MAX_DAYS   90  <span class="comment">#密码最长过期天数</span></span><br><span class="line">PASS_MIN_DAYS   10   <span class="comment">#密码最小过期天数</span></span><br><span class="line">PASS_WARN_AGE   7   <span class="comment">#密码过期警告天数</span></span><br><span class="line">如果修改设置有最小长度也需要修改</span><br><span class="line">PASS_MIN_LEN    8   <span class="comment">#密码最小长度</span></span><br></pre></td></tr></table></figure>

<h3 id="口令复杂度（很重要）"><a href="#口令复杂度（很重要）" class="headerlink" title="口令复杂度（很重要）"></a>口令复杂度（很重要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pam.d/system-auth</span><br><span class="line"><span class="comment">#在文件中找到 password requisite  pam_cracklib.so</span></span><br><span class="line"><span class="comment">#将其修改为:</span></span><br><span class="line">password requisite  pam_cracklib.so try_first_pass retry=3 dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8</span><br></pre></td></tr></table></figure>

<p>备注：至少包含一个数字、一个小写字母、一个大写字母、一个特殊字符、且密码长度&gt;&#x3D;8</p>
<h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/version</span><br></pre></td></tr></table></figure>

<h3 id="限制xx用户登录"><a href="#限制xx用户登录" class="headerlink" title="限制xx用户登录"></a>限制xx用户登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts.deny</span><br><span class="line"><span class="comment">#添加内容：</span></span><br><span class="line">sshd : 192.168.1.1</span><br><span class="line"><span class="comment">#禁止192.168.1.1对服务器进行ssh的登陆</span></span><br></pre></td></tr></table></figure>

<h3 id="检查是否有其他uid-x3D-0的用户"><a href="#检查是否有其他uid-x3D-0的用户" class="headerlink" title="检查是否有其他uid&#x3D;0的用户"></a>检查是否有其他uid&#x3D;0的用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F “：” <span class="string">&#x27;($3==0)  &#123;print  $1&#125; &#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<h3 id="登陆超时限制"><a href="#登陆超时限制" class="headerlink" title="登陆超时限制"></a>登陆超时限制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -p /etc/profile /etc/profile_bak <span class="comment">#（备份）</span></span><br><span class="line">gedit /etc/profile</span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line">TMOUT=300</span><br><span class="line"><span class="built_in">export</span> TMOUT</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export TMOUT=300&#x27;</span>&gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;readonly TMOUT&#x27;</span> &gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"><a href="#检查是否使用PAM认证模块禁止wheel组之外的用户su为root" class="headerlink" title="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"></a>检查是否使用PAM认证模块禁止wheel组之外的用户su为root</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/pam.d/su</span><br><span class="line"><span class="comment">#新增</span></span><br><span class="line">auth          sufficient     pam_rootok.so</span><br><span class="line">auth          required     pam_wheel.so use_uid</span><br></pre></td></tr></table></figure>

<p>备注：auth与sufficient之间由两个tab建隔开，sufficient与动态库路径之间使用一个tab建隔开</p>
<h3 id="禁用无用账户"><a href="#禁用无用账户" class="headerlink" title="禁用无用账户"></a>禁用无用账户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd <span class="comment">#查看口令文件，确认不必要的账号。</span></span><br><span class="line"></span><br><span class="line">passwd -l user <span class="comment"># 锁定不必要的账号</span></span><br></pre></td></tr></table></figure>

<h3 id="账户锁定"><a href="#账户锁定" class="headerlink" title="账户锁定"></a>账户锁定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/pam.d/system-auth</span><br><span class="line"><span class="comment">#在文件中修改或者添加</span></span><br><span class="line">auth required pam_tally.so onerr=fail deny=3 unlock_time=7200</span><br><span class="line"></span><br><span class="line"><span class="comment">#锁定账户举例：</span></span><br><span class="line">passwd -l bin</span><br><span class="line">passwd -l sys</span><br><span class="line">passwd -l adm</span><br></pre></td></tr></table></figure>

<h3 id="检查系统弱口令"><a href="#检查系统弱口令" class="headerlink" title="检查系统弱口令"></a>检查系统弱口令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">john /etc/shadow --single</span><br><span class="line">john /etc/shadow --wordlist=pass.dic</span><br></pre></td></tr></table></figure>

<p>我这边有报错 就不展示了<br>使用passwd 用户 命令为用户设置复杂的密码</p>
<h2 id="0x03-软件协议安全"><a href="#0x03-软件协议安全" class="headerlink" title="0x03 软件协议安全"></a>0x03 软件协议安全</h2><h3 id="openssh升级（按需做）"><a href="#openssh升级（按需做）" class="headerlink" title="openssh升级（按需做）"></a>openssh升级（按需做）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update  openssh</span><br></pre></td></tr></table></figure>

<h3 id="定时任务（防止病毒感染）"><a href="#定时任务（防止病毒感染）" class="headerlink" title="定时任务（防止病毒感染）"></a>定时任务（防止病毒感染）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时任务检查：</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#一次性任务检查：</span></span><br><span class="line">at -l</span><br></pre></td></tr></table></figure>

<h3 id="限制ssh登录（看是否需要）"><a href="#限制ssh登录（看是否需要）" class="headerlink" title="限制ssh登录（看是否需要）"></a>限制ssh登录（看是否需要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#查看PermitRootLogin是否为no</span></span><br><span class="line">PermitRootLogin no <span class="comment">#不允许root登陆</span></span><br><span class="line">Protocol 2 <span class="comment">#修改ssh使用的协议版本</span></span><br><span class="line">MaxAuthTries 3 <span class="comment">#修改允许密码错误次数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;tty1&quot;</span> &gt; /etc/securetty</span><br><span class="line">hmod 700 /root</span><br></pre></td></tr></table></figure>

<h3 id="限制su为root用户"><a href="#限制su为root用户" class="headerlink" title="限制su为root用户"></a>限制su为root用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/pam.d/su</span><br><span class="line"><span class="comment">#在头部添加</span></span><br><span class="line">auth required /lib/security/pam_wheel.so group=wheel</span><br></pre></td></tr></table></figure>

<h3 id="禁止root用户登录ftp"><a href="#禁止root用户登录ftp" class="headerlink" title="禁止root用户登录ftp"></a>禁止root用户登录ftp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为我的kali下没有这个文件，因此借鉴一下网上的</span></span><br><span class="line"><span class="built_in">cat</span> /etc/pam.d/vsftpd</span><br><span class="line">Auth required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed</span><br><span class="line"><span class="comment">#其中file=/etc/vsftpd/ftpusers即为当前系统上的ftpusers文件.</span></span><br><span class="line"><span class="built_in">echo</span>  “root”   &gt;&gt;   /etc/vsftpd/ftpusers</span><br></pre></td></tr></table></figure>

<h3 id="防止flood攻击"><a href="#防止flood攻击" class="headerlink" title="防止flood攻击"></a>防止flood攻击</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit  /etc/sysctl.conf</span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">sysctl  -p</span><br></pre></td></tr></table></figure>

<h3 id="禁ping"><a href="#禁ping" class="headerlink" title="禁ping"></a>禁ping</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/icmp_echo_igore_all</span><br></pre></td></tr></table></figure>

<h3 id="检查异常进程"><a href="#检查异常进程" class="headerlink" title="检查异常进程"></a>检查异常进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux|<span class="built_in">sort</span> -rn -k +3|<span class="built_in">head</span></span><br><span class="line"><span class="comment">#检查cpu占用前10</span></span><br><span class="line">ps aux|<span class="built_in">sort</span> -rn -k +4|<span class="built_in">head</span></span><br><span class="line"><span class="comment">#检查内存占用前10</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭无效的服务及端口"><a href="#关闭无效的服务及端口" class="headerlink" title="关闭无效的服务及端口"></a>关闭无效的服务及端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比如邮箱</span></span><br><span class="line">service postfix status</span><br><span class="line">chkconfig --del postfix</span><br><span class="line">chkconfig postfix off</span><br><span class="line"></span><br><span class="line"><span class="comment">#比如cpus</span></span><br><span class="line">service cups status</span><br><span class="line">chkconfig --del cups</span><br><span class="line">chkconfig cups off</span><br></pre></td></tr></table></figure>

<h3 id="设置防火墙策略"><a href="#设置防火墙策略" class="headerlink" title="设置防火墙策略"></a>设置防火墙策略</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#或者用防火墙策略：</span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;请根据用户实际业务端口占用等情况进行设置！&#x27;</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/sysconfig/iptables <span class="comment">#添加如下策略</span></span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m udp -p udp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>以下举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 22.48.11.11 -j DROP</span><br><span class="line"><span class="comment"># 22.48.11.11的包全部屏蔽</span></span><br><span class="line">iptables -I INPUT -s 22.48.11.0/24 -j DROP</span><br><span class="line"><span class="comment">#22.48.11.1到22.48.11.255的访问全部屏蔽</span></span><br><span class="line">iptables -I INPUT -s 192.168.1.1 -p tcp --dport 80 -j DROP</span><br><span class="line"><span class="comment"># 192.168.1.1的80端口的访问全部屏蔽</span></span><br><span class="line">iptables -I INPUT -s 192.168.1.0/24 -p tcp --dport 80 -j DROP</span><br><span class="line"><span class="comment">#192.168.1.1到192.168.1.255的80端口的访问全部屏蔽</span></span><br><span class="line">service iptabels restart</span><br><span class="line"><span class="comment">#重启防火墙</span></span><br></pre></td></tr></table></figure>

<h3 id="设置历史记录数量"><a href="#设置历史记录数量" class="headerlink" title="设置历史记录数量"></a>设置历史记录数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/profile /etc/profile_xu_bak <span class="comment">#（备份）</span></span><br><span class="line">sed -i s/<span class="string">&#x27;HISTSIZE=1000&#x27;</span>/<span class="string">&#x27;HISTSIZE=5000&#x27;</span>/g /etc/profile  <span class="comment">#（修改）</span></span><br><span class="line"><span class="built_in">cat</span> /etc/profile |grep HISTSIZE|grep -v <span class="built_in">export</span>   <span class="comment">#（检查）</span></span><br></pre></td></tr></table></figure>

<h3 id="配置用户最小权限"><a href="#配置用户最小权限" class="headerlink" title="配置用户最小权限"></a>配置用户最小权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 /etc/passwd</span><br><span class="line"><span class="built_in">chmod</span> 400 /etc/shadow</span><br><span class="line"><span class="built_in">chmod</span> 644 /etc/group</span><br></pre></td></tr></table></figure>

<h3 id="文件与目录缺省权限控制"><a href="#文件与目录缺省权限控制" class="headerlink" title="文件与目录缺省权限控制"></a>文件与目录缺省权限控制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/profile /etc/profile.bak  <span class="comment">#（备份）</span></span><br><span class="line">gedit  /etc/profile</span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line"><span class="built_in">umask</span> 027</span><br><span class="line"><span class="built_in">source</span>  /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="0x04-日志审计"><a href="#0x04-日志审计" class="headerlink" title="0x04 日志审计"></a>0x04 日志审计</h2><h3 id="启用远程日志功能"><a href="#启用远程日志功能" class="headerlink" title="启用远程日志功能"></a>启用远程日志功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/rsyslog.conf</span><br><span class="line">*.*         @Syslog日志服务器IP</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：* 和@之间存在的是tab键，非空格。</p>
</blockquote>
<h3 id="检查是否记录安全事件日志"><a href="#检查是否记录安全事件日志" class="headerlink" title="检查是否记录安全事件日志"></a>检查是否记录安全事件日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit  /etc/syslog.conf 或者 /etc/rsyslog.conf</span><br><span class="line"><span class="comment">#在文件中加入如下内容:</span></span><br><span class="line">*.err;kern.debug;daemon.notice     /var/log/messages</span><br><span class="line"><span class="built_in">chmod</span> 640 /var/log/messages</span><br><span class="line">service rsyslog restart</span><br></pre></td></tr></table></figure>

<h3 id="日志保留半年以上"><a href="#日志保留半年以上" class="headerlink" title="日志保留半年以上"></a>日志保留半年以上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span>/etc/logrotate.conf /etc/logrotate.conf_xu_bak   <span class="comment">#（备份）</span></span><br><span class="line">sed -i s/<span class="string">&#x27;rotate 4&#x27;</span>/<span class="string">&#x27;rotate 12&#x27;</span>/g /etc/logrotate.conf   <span class="comment">#（修改）</span></span><br><span class="line">service syslog restart    <span class="comment">#（重启）</span></span><br><span class="line"><span class="built_in">cat</span> /etc/logrotate.conf |grep -v <span class="string">&#x27;#&#x27;</span> |grep rotate    <span class="comment">#（检查）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>主机加固</tag>
        <tag>PAM认证</tag>
      </tags>
  </entry>
  <entry>
    <title>修改MySQL数据库字符编码为utf8mb4解决中文乱码</title>
    <url>/posts/688b.html</url>
    <content><![CDATA[<h3 id="故障情况"><a href="#故障情况" class="headerlink" title="故障情况"></a>故障情况</h3><p>由于MySQL编码原因会导致数据库出现乱码。修改为UTF-8后发现将emoji 文字直接写入 SQL 中，执行 insert 语句报错。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改MySQL数据库字符编码为utf8mb4，utf8mb4包含全世界所有国家需要用到的字符,是国际编码。</p>
<h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="1、进入MySQL控制台"><a href="#1、进入MySQL控制台" class="headerlink" title="1、进入MySQL控制台"></a>1、进入MySQL控制台</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#输入密码进入</span></span><br><span class="line">status;</span><br><span class="line"><span class="comment">#查看当前MySQL运行状态，</span></span><br><span class="line">Server characterset: latin1</span><br><span class="line">Db characterset: latin1</span><br><span class="line">Client characterset: utf8mb4</span><br><span class="line">Conn. characterset: utf8mb4</span><br></pre></td></tr></table></figure>

<p>默认客户端和服务器端都用了latin1编码，所以会出现乱码。</p>
<h4 id="2、修改mysql配置文件"><a href="#2、修改mysql配置文件" class="headerlink" title="2、修改mysql配置文件"></a>2、修改mysql配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="comment">#在[client]段增加下面代码</span></span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"><span class="comment">#在[mysqld]段增加下面的代码</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_general_ci</span><br><span class="line">:wq! <span class="comment">#保存退出</span></span><br></pre></td></tr></table></figure>

<h4 id="3、service-mysqld-restart-重启MySQL"><a href="#3、service-mysqld-restart-重启MySQL" class="headerlink" title="3、service mysqld restart #重启MySQL"></a>3、service mysqld restart #重启MySQL</h4><p>再次进入MySQL控制台查看字符编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">status;</span><br><span class="line">Server characterset: utf8mb4</span><br><span class="line">Db characterset: utf8mb4</span><br><span class="line">Client characterset: utf8mb4</span><br><span class="line">Conn. characterset: utf8mb4</span><br><span class="line"><span class="comment">#查看MySQL字符集</span></span><br><span class="line">show variables like <span class="string">&#x27;character_set_%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>MySQL数据库字符集编码修改完成！</p>
<p><code>参数说明</code></p>
<ul>
<li>character_set_client：客户端请求数据的字符集。</li>
<li>character_set_connection：从客户端接收到数据，然后传输的字符集。</li>
<li>character_set_database：默认数据库的字符集，无论默认数据库如何改变，都是这个字符集；如果没有默认数据库，使character_set_server指定的字符集，此参数无需设置。</li>
<li>character_set_filesystem：把操作系统上文件名转化成此字符集，即把character_set_client转换character_set_filesystem，默认binary即可。</li>
<li>character_set_results：结果集的字符集。</li>
<li>character_set_server：数据库服务器的默认字符集。</li>
<li>character_set_system：这个值总是utf8mb4，不需要设置，存储系统元数据的字符集。</li>
</ul>
<p><code>备注：</code><br>MySQL 5.5之前的版本设置办法：<br>在[client]段下添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<p>在[mysqld]段下添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<p>注意，如果修改后不能启动报错，把<code>[mysqld]</code>段下<code>default-character-set=utf8</code>改为<code>character_set_server=utf8mb4</code>，取消<code>[client]</code>段的设置。</p>
<p>创建数据库的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Create DATABASE IF NOT EXISTS mydata default charset utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<p>至此，修改MySQL数据库字符编码为utf8mb4解决中文乱码问题。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么搭建NTP时间服务器</title>
    <url>/posts/7.html</url>
    <content><![CDATA[<h2 id="Linux中怎么搭建NTP服务器"><a href="#Linux中怎么搭建NTP服务器" class="headerlink" title="Linux中怎么搭建NTP服务器"></a>Linux中怎么搭建NTP服务器</h2><blockquote>
<p>说明：本次实验采用两台加载CentOS7.7版本的镜像文件的虚拟机，要求一台配置好时间服务之后，由另一台进行同步。</p>
</blockquote>
<p>说在前面：ntp和ntpdate区别</p>
<ul>
<li>两个服务都是centos自带的（centos7中不自带ntp）。ntp的安装包名是ntp；ntpdate的安装包是ntpdate。他们并非由一个安装包提供。</li>
<li>ntp守护进程为ntpd，配置文件是&#x2F;etc&#x2F;ntp.conf</li>
<li>ntpdate用于客户端的时间矫正，非NTP服务器可以不启动NTP。</li>
</ul>
<p>我们先讲一下时间服务器的搭建：</p>
<p>首先先说一下我们常用的Windows系统的时间是怎样的，我们通过控制面板打开日期和时间，然后选择Internet时间，点击更改设置就可以知道当前的服务器是怎样与时间同步的了。<br>这里要求时间服务器要能上网（为了保证精度），它从外部同步时间，最后给内部主机提供同步。</p>
<p>先讲几条基础命令</p>
<table>
<thead>
<tr>
<th align="center">功能</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查看时间</td>
<td align="left">date</td>
</tr>
<tr>
<td align="center">查看硬件时间</td>
<td align="left">hwclock -r</td>
</tr>
<tr>
<td align="center">查看系统所在时区</td>
<td align="left">date -R</td>
</tr>
<tr>
<td align="center">查看所有时区</td>
<td align="left">ls &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F; 或者是：timedatectl list-timezones</td>
</tr>
<tr>
<td align="center">查看其它时区的当前时间</td>
<td align="left">zdump Hongkong</td>
</tr>
<tr>
<td align="center">修改系统时间</td>
<td align="left">date -s “20190408 17:41:00”</td>
</tr>
<tr>
<td align="center">修改时区①</td>
<td align="left">tzselect（之后按数字进行选择） vim .bash_profile TZ&#x3D;‘Asia&#x2F;hanghai’; export TZ（粘贴在末尾）source ~&#x2F;.bash_profile</td>
</tr>
<tr>
<td align="center">修改时区②</td>
<td align="left">timedatectl set-timezone Europe&#x2F;Lisbon</td>
</tr>
<tr>
<td align="center">保存时间修改</td>
<td align="left">clock -w</td>
</tr>
</tbody></table>
<h3 id="NTP服务的命令、配置"><a href="#NTP服务的命令、配置" class="headerlink" title="NTP服务的命令、配置"></a>NTP服务的命令、配置</h3><h4 id="1、有关ntp的命令"><a href="#1、有关ntp的命令" class="headerlink" title="1、有关ntp的命令"></a>1、有关ntp的命令</h4><table>
<thead>
<tr>
<th align="center">其他命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ntpq -p</td>
<td align="left">查询网络中的NTP服务器，同时显示客户端和每个服务器的连接状态</td>
</tr>
<tr>
<td align="center">ntpdate -q 192.168.0.35</td>
<td align="left">查看上层服务器状态</td>
</tr>
<tr>
<td align="center">ntpdate 192.168.0.35</td>
<td align="left">更新时间</td>
</tr>
<tr>
<td align="center">watch ntpdate 192.168.0.35</td>
<td align="left">这条命令为客户端使用，每2秒会发生一次变化</td>
</tr>
</tbody></table>
<h4 id="2、有关ntpq-p的注解"><a href="#2、有关ntpq-p的注解" class="headerlink" title="2、有关ntpq -p的注解"></a>2、有关ntpq -p的注解</h4><table>
<thead>
<tr>
<th align="center">remote</th>
<th align="left">远程主机的主机名或IP</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="left">目前正在使用的上层NTP</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">已连线,可提供时间更新的候补服务器</td>
</tr>
<tr>
<td align="center">-</td>
<td align="left">远程服务器被clustering algorithm认为是不合格的NTP Server</td>
</tr>
<tr>
<td align="center">x</td>
<td align="left">远程服务器不可用</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">其它</th>
<th align="left">注解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">refid</td>
<td align="left">上级NTP的时间基准服务器</td>
</tr>
<tr>
<td align="center">st</td>
<td align="left">就是stratum 上层NTP的层级，层级0-15</td>
</tr>
<tr>
<td align="center">when</td>
<td align="left">几秒钟前曾做过时间同步更新</td>
</tr>
<tr>
<td align="center">poll</td>
<td align="left">下一次更新在几秒后，逐步增大</td>
</tr>
<tr>
<td align="center">reach</td>
<td align="left">八进制数，已经向上层服务器要求更新的次数</td>
</tr>
<tr>
<td align="center">delay</td>
<td align="left">网络传输过程中的延迟时间</td>
</tr>
<tr>
<td align="center">offset</td>
<td align="left">本地和服务器之间的时间差别，越接近0，说明和服务器的时间越接近</td>
</tr>
<tr>
<td align="center">jitter linux</td>
<td align="left">系统时间与bios硬件时钟之间的差异</td>
</tr>
</tbody></table>
<h4 id="3、-x2F-etc-x2F-ntp-conf-ntp的配置文件介绍"><a href="#3、-x2F-etc-x2F-ntp-conf-ntp的配置文件介绍" class="headerlink" title="3、&#x2F;etc&#x2F;ntp.conf ntp的配置文件介绍"></a>3、&#x2F;etc&#x2F;ntp.conf ntp的配置文件介绍</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统时间和硬件时间的偏差记录</span></span><br><span class="line">driftfile /var/lib/ntp/drift</span><br><span class="line"><span class="comment">#允许所有的访问，</span></span><br><span class="line">restrict default nomodify notrap nopeer noquery`</span><br><span class="line"><span class="comment">#允许 192.168.221.0网段访问</span></span><br><span class="line">restrict [192.168.221.0] mask [255.255.255.0] [parameter]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">parameter的参数</th>
<th align="left">注解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ignore</td>
<td align="left">拒绝所有类型的ntp连接</td>
</tr>
<tr>
<td align="center">nomodify</td>
<td align="left">客户端不能使用ntpc与ntpq两支程式来修改服务器的时间参数</td>
</tr>
<tr>
<td align="center">noquery</td>
<td align="left">客户端不能使用ntpq、ntpc等指令来查询服务器时间，等于不提供ntp的网络校时</td>
</tr>
<tr>
<td align="center">notrap</td>
<td align="left">不提供trap这个远程时间登录的功能</td>
</tr>
<tr>
<td align="center">notrust</td>
<td align="left">拒绝没有认证的客户端</td>
</tr>
<tr>
<td align="center">nopeer</td>
<td align="left">不与其他同一层的ntp服务器进行时间同步</td>
</tr>
</tbody></table>
<h3 id="搭建NTP服务"><a href="#搭建NTP服务" class="headerlink" title="搭建NTP服务"></a>搭建NTP服务</h3><p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>
<p>安装ntp包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ntp -y</span><br></pre></td></tr></table></figure>
<p>编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ntp.conf</span><br></pre></td></tr></table></figure>
<p>可以将中间的几行默认上层时间的服务器注释掉，也可以不注释掉。注释掉之后我们这台时间服务器就没法向外部服务器同步了，我是为了方便演示，后面加上图中的指令：表示使用本地时间作为ntp服务器提供给ntp客户端。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">restrict 192.168.0.0 mask 255.255.255.0 modify notrap</span><br><span class="line"><span class="comment">#为192.168.0.0网段提供授时服务</span></span><br><span class="line">server 127.127.1.0  prefer</span><br><span class="line"><span class="comment">#prefer代表这台主机优先级最高</span></span><br><span class="line">fudge 1127.127.1.0 stratum 8</span><br><span class="line"><span class="comment">#指定服务器为本地，设置层级为8</span></span><br><span class="line">systemctl restart ntpd</span><br><span class="line"><span class="comment">#重启服务。</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用 <code>netstat -nlutp | grep ntp</code> 可以查看与ntp服务有关联的进程。</p>
<p>如果客户机上安装有ntp，在客户端需要修改<code>/etc/ntp.conf</code>，添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server 192.168.0.1    <span class="comment">#指名上层NTP服务器</span></span><br><span class="line">restrict 192.168.0.1       <span class="comment">#放行156.0.26.6</span></span><br></pre></td></tr></table></figure>

<p>修改保存后使用<code>ntpq -p</code>命令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos]<span class="comment"># ntpq -p</span></span><br><span class="line">   remote       refid      st t  when  poll reach  delay  offset  jitter</span><br><span class="line"> ========================================================================</span><br><span class="line">   192.168.0.1    LOCAL(0)  3 u   93   1   377   0.676   -0.563   0.545</span><br></pre></td></tr></table></figure>

<p>未安装ntp可使用ntpdate定时同步<br>设置计划任务，编辑配置文件之后，让它实现一开机就自动同步。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/crontab</span><br><span class="line"><span class="comment">#插入下面这句话：</span></span><br><span class="line">*/30 * * * * root /usr/sbin/ntpdate 192.168.0.1 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="comment">#每30秒同步一次</span></span><br></pre></td></tr></table></figure>
<p>linux shell中<code>&quot;2&gt;&amp;1&quot;</code>含义</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="left">注解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td align="left">重定向</td>
</tr>
<tr>
<td align="center">&#x2F;dev&#x2F;null</td>
<td align="left">代表空设备</td>
</tr>
<tr>
<td align="center">2	stderr</td>
<td align="left">标准错误</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="left">表示等同于</td>
</tr>
<tr>
<td align="center">2&gt;1&amp;1</td>
<td align="left">将标准错误重定向到标准输出</td>
</tr>
</tbody></table>
<h2 id="windows搭建NTP时钟服务器"><a href="#windows搭建NTP时钟服务器" class="headerlink" title="windows搭建NTP时钟服务器"></a>windows搭建NTP时钟服务器</h2><h3 id="配置-NTP"><a href="#配置-NTP" class="headerlink" title="配置 NTP"></a>配置 NTP</h3><h4 id="修改注册表项"><a href="#修改注册表项" class="headerlink" title="修改注册表项"></a>修改注册表项</h4><p>在搜索框中打开注册表，使用命令： <code>regedit</code>，进入注册表项<code>HKEY_LOCAL_MACHINE—&gt;SYSTEM—&gt;CurrentControlSet—&gt;Services—&gt;W32Time—&gt;TimeProviders—&gt;NtpServer</code></p>
<p>把<code>Enabled</code> 值设置为 1打开NTP，（系统默认0）。</p>
<p>进入注册表项<code>HKEY_LOCAL_MACHINE—&gt;SYSTEM—&gt;CurrentControlSet—&gt;Services—&gt;W32Time—&gt;Config</code></p>
<p>把<code>AnnounceFlags</code>值设置为 5 （系统默认 10）。该设定强制主机将它自身宣布为可靠的时间源，从而使用内置的互补金属氧化物半导体(CMOS) 时钟。</p>
<p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient</code>的「enable」设定为0 以防止作为客户端自动同步外界的时间服务。</p>
<h4 id="启动时间服务"><a href="#启动时间服务" class="headerlink" title="启动时间服务"></a>启动时间服务</h4><p>找到Windows time服务，使用命令：<code>services.msc</code></p>
<p>将Windows time服务设置为自动启动，点击应用和确定，重新启动电脑或者主机，所有配置生效。</p>
<p>NTP时钟搭建完毕，此时只需其他设备将本电脑IP填入时钟同步，点击更新即可同步改时钟</p>
<p>打开客户机控制面板，日期和时间，修改 Internet 时间中地址。</p>
<h4 id="域控中配置组策略"><a href="#域控中配置组策略" class="headerlink" title="域控中配置组策略"></a>域控中配置组策略</h4><p>运行输入<code>gpedit.msc</code>，计算机配置–&gt;管理模板–&gt;系统–&gt;Windows时间服务–&gt;时间提供程序–&gt;右单击“配置Window NTP客户端”，选择属性。</p>
<ul>
<li>选择“已启用”</li>
<li>在Ntp Server对应栏位输入时间同步服务器的地址。</li>
<li>Tpye栏位选择NTP。</li>
<li>SpecialPollInterval栏位输入需要同步的时间周期，单位：秒，如：每10分钟同步一次，输入600。</li>
</ul>
<p>计算机配置–&gt;管理模板–&gt;系统–&gt;Windows时间服务–&gt;时间提供程序–&gt;右单击“启用Window NTP客户端”，选择“已启用”</p>
<p>计算机配置–&gt;管理模板–&gt;系统–&gt;Windows时间服务–&gt;时间提供程序–&gt;右单击“启用Window NTP服务端”，选择“已禁用”</p>
<p>时间和日期属性中，填入时间同步服务器地址，方便必要时进行手动同步。</p>
<h4 id="时间同步服务间隔时间太长"><a href="#时间同步服务间隔时间太长" class="headerlink" title="时间同步服务间隔时间太长"></a>时间同步服务间隔时间太长</h4><p>由于Windows时间同步服务距上次同步时间较长，造成时间显示不正常。</p>
<p>解决方法：打开注册表编辑器（在运行对话框输入“regedit”），定位到<code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services\W32Time\TimeProviders\NtpClient</code>然后找到为<code>SpecialPolllnterval</code>的键，将键值的基数改为“十进制”接着把键值数据改为“1800”(30分钟)默认是“604800”(7天),（根据自己的需求填入，记住单位是秒），按F5刷新一下，就可以了。</p>
<h4 id="时间同步地址注册表快速更改"><a href="#时间同步地址注册表快速更改" class="headerlink" title="时间同步地址注册表快速更改"></a>时间同步地址注册表快速更改</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\DateTime\Servers]</span><br><span class="line">@=&quot;<span class="number">0</span>&quot;</span><br><span class="line">&quot;<span class="number">0</span>&quot;=&quot;ntp1.aliyun.com&quot;</span><br><span class="line">&quot;<span class="number">1</span>&quot;=&quot;ntp2.aliyun.com&quot;</span><br><span class="line">&quot;<span class="number">2</span>&quot;=&quot;<span class="built_in">time</span>.windows.com&quot;</span><br><span class="line">&quot;<span class="number">3</span>&quot;=&quot;<span class="built_in">time</span>.nist.gov&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services\W32Time\TimeProviders\NtpClient]</span><br><span class="line">&#x27;SpecialPolllnterval&#x27;=&quot;<span class="number">1800</span>&quot;</span><br></pre></td></tr></table></figure>

<p>另存为NTP.reg文件,双击导入</p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Windows Server</tag>
        <tag>NTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 系统修复</title>
    <url>/posts/462d.html</url>
    <content><![CDATA[<h3 id="CentOS-系统修复"><a href="#CentOS-系统修复" class="headerlink" title="CentOS 系统修复"></a>CentOS 系统修复</h3><p>首先，光盘引导选择<code>Troubleshooting</code>-<code>Rescue a CentOS system</code>,进入光盘引导修改系统，进入界面后输入<code>3</code>，进入<code>Skip to shell</code>, shell 操作界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsblk <span class="comment">#查看磁盘情况，随意挂载个磁盘查看是否为根目录。</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /demo </span><br><span class="line">$ mount /dev/vda3 /demo</span><br><span class="line">$ <span class="built_in">ls</span>  <span class="comment">#查看目录是否为根目录</span></span><br><span class="line">$ umount /demo   <span class="comment">#卸载磁盘</span></span><br><span class="line">$ blkid  /dev/vda3  <span class="comment">#查看磁盘分区格式</span></span><br><span class="line">$ fsck  -fy   /dev/vda3    <span class="comment">#ext格式使用此命令修复</span></span><br><span class="line">$ xfs_repair /dev/vda3     <span class="comment">#xfs 格式使用此命令修复</span></span><br><span class="line"><span class="keyword">done</span>     <span class="comment">#说明修复完了，把iso卸载掉然后reboot就好</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Ubuntu</strong>系统修复相同</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu全盘备份与恢复，亲自总结，实测可靠</title>
    <url>/posts/58b2.html</url>
    <content><![CDATA[<p>我该如何备份我的Ubuntu系统呢？很简单，就像你备份或压缩其它东西一样，使用TAR。和Windows不同，Linux不会限制root访问任何东西，你可以把分区上的所有东西都扔到一个TAR文件里去！</p>
<h2 id="Ubuntu-备份与恢复系统"><a href="#Ubuntu-备份与恢复系统" class="headerlink" title="Ubuntu 备份与恢复系统"></a>Ubuntu 备份与恢复系统</h2><h3 id="系统备份"><a href="#系统备份" class="headerlink" title="系统备份"></a>系统备份</h3><blockquote>
<p>使用TAR。和Windows不同，Linux不会限制root访问任何东西，你可以把分区上的所有东西都扔到一个TAR文件里去</p>
</blockquote>
<p>打开一个终端，并运行 sudo su（回车后要求输入密码）；</p>
<p>继续在终端中输入以下指令，进入系统根目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /</span><br><span class="line"><span class="comment">#开始备份系统，在终端中输入</span></span><br><span class="line">$ tar cvpzf backup.tgz --exclude=/proc --exclude=/lost+found --exclude=/backup.tgz --exclude=/mnt --exclude=/sys --exclude=/media /</span><br></pre></td></tr></table></figure>

<p>让我们来简单看一下这个命令：</p>
<p><code>tar</code> 是用来备份的程序</p>
<ul>
<li>c 新建一个备份文档</li>
<li>v 详细模式， tar程序将在屏幕上实时输出所有信息。</li>
<li>p 保存许可，并应用到所有文件。</li>
<li>z 采用‘gzip’压缩备份文件，以减小备份文件体积。</li>
<li>f 说明备份文件存放的路径， Ubuntu.tgz 是本例子中备份文件名。</li>
<li>“&#x2F;“ 是我们要备份的目录，在这里是整个文件系统。</li>
</ul>
<blockquote>
<p>在档案文件名”backup.tgz”和要备份的目录名”&#x2F;“之间给出了备份时必须排除在外的目录。有些目录是无用的，例如”&#x2F;proc”、”&#x2F;lost + found”、”&#x2F;sys”。当然，”backup.tgz”这个档案文件本身必须排除在外，否则你可能会得到一些超出常理的结果。如果不把”&#x2F;mnt”排除在外，那么挂载在”&#x2F;mnt”上的其它分区也会被备份。另外需要确认一下”&#x2F;media”上没有挂载任何东西(例如光盘、移动硬盘)，如果有挂载东西， 必须把”&#x2F;media”也排除在外.</p>
</blockquote>
<p>备份完成后，在文件系统的根目录将生成一个名为”backup.tgz”的文件，它的尺寸有可能非常大。现在你可以把它烧录到DVD上或者放到你认为安全的地方去。<br>在备份命令结束时你可能会看到这样一个提示：”tar: Error exit delayed from previous errors”，多数情况下你可以忽略它。</p>
<h3 id="恢复系统"><a href="#恢复系统" class="headerlink" title="恢复系统"></a>恢复系统</h3><p>如果原来的Ubuntu系统已经崩溃，无法进入。则可以使用Ubuntu安装U盘（live USB）进入试用Ubuntu界面。</p>
<p>切换到root用户，找到之前Ubuntu系统的根目录所在磁盘分区（一般电脑上的磁盘分区（假设分区名称为sdaX）均可以在当前Ubuntu系统的根目录下的media目录下（即&#x2F;media）找到。目录通常为当前根目录下 cd &#x2F;media&#x2F;磁盘名称&#x2F;分区名称）。进入该分区，输入以下指令来删除该根目录下的所有文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">rm</span> -rf /media/磁盘名称/分区名称*</span><br><span class="line"><span class="comment">#将备份文件”backup.tgz”拷入该分区；</span></span><br><span class="line">$ sudo <span class="built_in">cp</span> -i backup.tgz /media/磁盘名/分区名sdaX</span><br><span class="line"><span class="comment">#进入分区并将压缩文件解压缩，参数x是告诉tar程序解压缩备份文件。</span></span><br><span class="line">$ sudo tar xvpzf backup.tgz</span><br><span class="line"><span class="comment">#如果你的档案文件是使用Bzip2压缩的，应该用</span></span><br><span class="line">$ sudo tar xvpjf backup.tar.bz2 -C /</span><br><span class="line"><span class="comment">#注意：上面的命令会用档案文件中的文件覆盖分区上的所有文件。</span></span><br><span class="line"><span class="comment">#重新创建那些在备份时被排除在外的目录；</span></span><br><span class="line">$ sudo <span class="built_in">mkdir</span> proc lost+found mnt sys media</span><br><span class="line"><span class="comment">#或者这样：</span></span><br><span class="line"><span class="built_in">mkdir</span> proc</span><br><span class="line"><span class="built_in">mkdir</span> lost+found</span><br><span class="line"><span class="built_in">mkdir</span> mnt</span><br><span class="line"><span class="built_in">mkdir</span> sys</span><br><span class="line"><span class="comment">#如有必要检查下分区与引导</span></span><br><span class="line"><span class="comment">#查看当前分区UUID命令</span></span><br><span class="line">$ blkid /dev/sdb1</span><br><span class="line"><span class="comment">#修改引导</span></span><br><span class="line">$ vi /etc/fstab</span><br><span class="line"><span class="comment">#安装grub引导</span></span><br><span class="line">$ grup-install /dev/sdb</span><br><span class="line"><span class="comment">#更新引导</span></span><br><span class="line">$ update-grub2</span><br><span class="line"><span class="comment">#检查分区挂载是否正常</span></span><br><span class="line">$ mount -a</span><br></pre></td></tr></table></figure>
<p>当你重启电脑，你会发现一切东西恢复到你创建备份时的样子了！</p>
<h2 id="备份工具"><a href="#备份工具" class="headerlink" title="备份工具"></a>备份工具</h2><p>常用工具列表</p>
<ul>
<li>dd                   数据复制,转换实用工具</li>
<li>tar                  GNU磁盘存档实用工具</li>
<li>cpio                数据存档实用工具</li>
<li>dump&#x2F;restore</li>
</ul>
<h3 id="dd-命令"><a href="#dd-命令" class="headerlink" title="dd 命令"></a>dd 命令</h3><p>备份mbr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sda of=/backup/mbr.img bs=512 count=1</span><br></pre></td></tr></table></figure>

<p>还原mbr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/backup/mbr.img of=/dev/sda bs=446 count=1</span><br></pre></td></tr></table></figure>

<p>还原分区表,跳过主引导记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/backup/mbr.img of=/dev/sda bs=1 count=64 skip=446 seek=446</span><br></pre></td></tr></table></figure>

<h3 id="GNU-x2F-TAR"><a href="#GNU-x2F-TAR" class="headerlink" title="GNU&#x2F;TAR"></a>GNU&#x2F;TAR</h3><p>备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cpzvf backup.tar.gz /media/usb/*</span><br></pre></td></tr></table></figure>

<p>还原</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xpzvf backup.tar.gz -C /media/usb/</span><br></pre></td></tr></table></figure>

<h3 id="xfsdump-x2F-xfsrestore"><a href="#xfsdump-x2F-xfsrestore" class="headerlink" title="xfsdump&#x2F;xfsrestore"></a>xfsdump&#x2F;xfsrestore</h3><p>备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xfsdump - /boot &gt; backup.file</span><br></pre></td></tr></table></figure>

<p>还原</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> backup.file | xfsrestore - /boot</span><br></pre></td></tr></table></figure>

<h3 id="救援工具"><a href="#救援工具" class="headerlink" title="救援工具"></a>救援工具</h3><p>可启动光盘</p>
<p><code>Redo Backup and Recovery</code></p>
<p>开源启动光盘的备份和恢复工具,具有GUI界面.</p>
]]></content>
      <categories>
        <category>数据备份</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>备份</tag>
        <tag>恢复</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 16.04 硬盘分区，挂载，硬盘分区方案</title>
    <url>/posts/5.html</url>
    <content><![CDATA[<h2 id="Ubuntu-挂载硬盘分区"><a href="#Ubuntu-挂载硬盘分区" class="headerlink" title="Ubuntu 挂载硬盘分区"></a>Ubuntu 挂载硬盘分区</h2><h3 id="0x01-查看硬盘及所属分区情况"><a href="#0x01-查看硬盘及所属分区情况" class="headerlink" title="0x01 查看硬盘及所属分区情况"></a>0x01 查看硬盘及所属分区情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsblk</span><br><span class="line">NAME           MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT</span><br><span class="line">sda              8:0    0 465.8G  0 disk  </span><br><span class="line">sda1           8:1    0   512M  0 part  /boot/efi</span><br><span class="line">sda2           8:2    0 464.3G  0 part  /</span><br><span class="line">sda3           8:3    0   976M  0 part  </span><br><span class="line">  cryptswap1 252:0    0 975.5M  0 crypt</span><br><span class="line">sdb              8:16   0   5.5T  0 disk  </span><br><span class="line">sdc              8:32   0   5.5T  0 disk  </span><br><span class="line"><span class="comment">#可以查看上面有三块硬盘，二块未分配</span></span><br><span class="line">sudo fdisk -lu</span><br></pre></td></tr></table></figure>
<p><img src="/medias/ubuntu/1585103977.jpg" alt="fdisk -lu"></p>
<p>显示当前的硬盘及所属分区的情况。如图所示：<br>图中有两块硬盘，我们要对第二块硬盘进行分区。<br>上面480G是我安装ubuntu的位置。但是2个2T的机械硬盘没有识别出来。</p>
<h3 id="0x02-对硬盘进行分区"><a href="#0x02-对硬盘进行分区" class="headerlink" title="0x02 对硬盘进行分区"></a>0x02 对硬盘进行分区</h3><p>我现在先分区&#x2F;dev&#x2F;sdb。再挂载这一块硬盘。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br><span class="line"><span class="comment">#输入`n`</span></span><br><span class="line"><span class="comment">#输入`p`</span></span><br><span class="line"><span class="comment">#完成后输入`w`保存</span></span><br></pre></td></tr></table></figure>

<p>GPT格式分区<br><img src="/medias/ubuntu/1585104274.jpg" alt="fdisk sdb"></p>
<p>如有必要可重新初始化硬盘,再格式化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/sdb mklabel gpt</span><br><span class="line">mkfs.ext4 /dev/sdb</span><br></pre></td></tr></table></figure>

<h3 id="0x03-查看刚刚操作的硬盘详情。"><a href="#0x03-查看刚刚操作的硬盘详情。" class="headerlink" title="0x03 查看刚刚操作的硬盘详情。"></a>0x03 查看刚刚操作的硬盘详情。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>

<p><img src="/medias/ubuntu/1585104428.jpg" alt="fdisk l"></p>
<p>已经发现&#x2F;dev&#x2F;sdb这一块硬盘type 修改为gpt。</p>
<h3 id="0x04-格式化该分区"><a href="#0x04-格式化该分区" class="headerlink" title="0x04 格式化该分区"></a>0x04 格式化该分区</h3><p>将分区格式化成ext4文件系统类型，无法进入和查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkfs -t ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>

<p><img src="/medias/ubuntu/1585104525.jpg" alt="mkfs ext4"></p>
<h3 id="0x05-挂载硬盘分区"><a href="#0x05-挂载硬盘分区" class="headerlink" title="0x05 挂载硬盘分区"></a>0x05 挂载硬盘分区</h3><p>新硬盘需要挂载在一个新的目录下面。且该目录应该为空。<br>我首先创建一个文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /data_1</span><br><span class="line"><span class="comment">#再把该硬盘挂载在/data_1下面。</span></span><br><span class="line">sudo mount -t ext4 -o rw /dev/sdb1 /data_1/</span><br></pre></td></tr></table></figure>

<h3 id="0x06-配置硬盘在系统启动自动挂载"><a href="#0x06-配置硬盘在系统启动自动挂载" class="headerlink" title="0x06 配置硬盘在系统启动自动挂载"></a>0x06 配置硬盘在系统启动自动挂载</h3><p>查看&#x2F;dev&#x2F;sdb1 这个分区的UUID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo blkid /dev/sdb1</span><br><span class="line"><span class="comment">#其它方式获取 UUID </span></span><br><span class="line">blkid /dev/sdb |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|sed <span class="string">&#x27;s/&quot;//g&#x27;</span></span><br><span class="line">UUID=0b238fbf-ea33-49dd-bb5c-adf7b763d9c6</span><br><span class="line"><span class="comment">#打开文件/etc/fstab</span></span><br><span class="line">sudo gedit /etc/fstab</span><br><span class="line"><span class="comment">#增加一行</span></span><br><span class="line">UUID=0b238fbf-ea33-49dd-bb5c-adf7b763d9c6 /data ext4 defaults 0 0</span><br><span class="line"><span class="comment">#此处UUID为上面找到的</span></span><br></pre></td></tr></table></figure>
<h3 id="0x07-检查并挂载新添项"><a href="#0x07-检查并挂载新添项" class="headerlink" title="0x07 检查并挂载新添项"></a>0x07 检查并挂载新添项</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -a</span><br></pre></td></tr></table></figure>

<p>mount -a 会&#x2F;etc&#x2F;fstab中的项全部挂载，如果有错，则会提示错误，然后根据错误找出原因修改。</p>
<p>注：修改&#x2F;etc&#x2F;fstab 一定注意，不要修改错误，很有可能就重启进不了系统，我之前就是修改错误，没有进去系统，我也将修改错误，最后怎么修改进去系统的步骤写出来。</p>
<p>进入grub模式，修改&#x2F;etc&#x2F;fstab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/fstab</span><br></pre></td></tr></table></figure>

<p>把最后自己增加的删除掉。使用方法请自己百度VIM使用。<br>最后esc返回。输入：wq 保存。关机重启即可。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>硬盘分区</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo各种优化</title>
    <url>/posts/632e.html</url>
    <content><![CDATA[<h2 id="0x01-npm速度优化"><a href="#0x01-npm速度优化" class="headerlink" title="0x01 npm速度优化"></a>0x01 npm速度优化</h2><hr>
<blockquote>
<p>在国内npm的下载速度着实是有点慢。由于下面内容会安装较多的插件，建议先更改npm仓库地址，以便能更快的安装插件</p>
</blockquote>
<h3 id="使用淘宝镜像"><a href="#使用淘宝镜像" class="headerlink" title="使用淘宝镜像"></a>使用淘宝镜像</h3><ul>
<li><p>npm的默认仓库地址是 <code>https://registry.npmjs.org/</code></p>
</li>
<li><p>可以使用以下命令查看当前npm的仓库地址</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用以下命令来改变默认下载地址，从而达到不安装<code>cnpm</code>就能采用淘宝镜像的目的，然后使用上面的get命令查看是否设置成功。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h3><ul>
<li>安装cnpm，命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<ul>
<li>安装后，使用以下命令测试是否安装成功：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<ul>
<li>成功后，以后都使用 <code>cnpm</code> 代替以前 <code>npm</code> 来执行命令！</li>
</ul>
<h2 id="0x02-访问速度优化"><a href="#0x02-访问速度优化" class="headerlink" title="0x02 访问速度优化"></a>0x02 访问速度优化</h2><h3 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h3><p>什么是<code>预加载</code> 和 <code>懒加载</code></p>
<p><code>预加载</code>就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验</p>
<ul>
<li>缺点：会增加服务器压力</li>
</ul>
<p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p>
<ul>
<li>优点：对服务器有一定的缓解压力作用</li>
</ul>
<h4 id="懒加载法"><a href="#懒加载法" class="headerlink" title="懒加载法"></a>懒加载法</h4><p>装图片懒加载插件： <a href="https://github.com/Troy-Yang/hexo-lazyload-image">hexo-lazyload-image</a></p>
<p>在Hexo根目录执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure>

<p>然后在Hexo配置文件末尾加入以下代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 是否只对文章的图片做懒加载</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># eg ./images/loading.gif</span></span><br></pre></td></tr></table></figure>

<p>到这里就配置完了，执行<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>就有效果了，以后博客上的图片就都是懒加载了，以上步骤理论上任何主题都可以用</p>
<p>一般情况下懒加载会和gallery插件会发生冲突，结果可能就是点开图片，左翻右翻都是<code>loading image。matery</code>主题的解决方案是：</p>
<p>修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件</p>
<p>在第108行加上：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">$(document).find(&#x27;img[data-original]&#x27;).each(function()&#123;</span><br><span class="line">    $(this).parent().attr(&quot;href&quot;, $(this).attr(&quot;data-original&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。</p>
<p>伪解决方案：打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p>
<p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;brand-logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- url_for() %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;waves-effect waves-light&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) &#123; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= theme.logo %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo-img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;LOGO&quot;</span>&gt;</span></span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;logo-span&quot;</span>&gt;</span>&lt;%- config.title %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h4><p><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项</p>
<p>方法就是在 <code>loadingImg</code> 后配置图片的路径就好了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 是否只对文章的图片做懒加载</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="string">/medias/loading.gif</span> <span class="comment"># eg ./images/loading.gif</span></span><br></pre></td></tr></table></figure>

<h4 id="懒加载优化"><a href="#懒加载优化" class="headerlink" title="懒加载优化"></a>懒加载优化</h4><blockquote>
<p>经过以上操作就已经很完美了，以下内容可做可不做</p>
</blockquote>
<ul>
<li><p>其实第一次加载后本地都是有缓存的，如果每次都把loading显示出来就不那么好看</p>
</li>
<li><p>所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画</p>
</li>
<li><p>打开 <code>Hexo根目录</code>&gt;<code>node_modules</code> &gt; <code>hexo-lazyload-image</code> &gt; <code>lib</code> &gt; <code>simple-lazyload.js</code> 文件</p>
</li>
<li><p>第9行修改为：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&amp;&amp; rect.<span class="property">top</span> &lt;= (<span class="variable language_">window</span>.<span class="property">innerHeight</span> +<span class="number">240</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> +<span class="number">240</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 作用：提前240个像素加载图片；当然这个值也可以根据自己情况修改</p>
</blockquote>
<h3 id="代码压缩优化"><a href="#代码压缩优化" class="headerlink" title="代码压缩优化"></a>代码压缩优化</h3><h4 id="gulp实现代码压缩"><a href="#gulp实现代码压缩" class="headerlink" title="gulp实现代码压缩"></a>gulp实现代码压缩</h4><ul>
<li>cd到Hexo根目录依次执行以下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装gulp模块</span></span><br><span class="line">npm install gulp -g</span><br><span class="line"><span class="comment"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span></span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="comment"># 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></table></figure>

<ul>
<li>在Hexo根目录新建文件 <code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">var gulp = require(&quot;gulp&quot;);</span><br><span class="line">var debug = require(&quot;gulp-debug&quot;);</span><br><span class="line">var cleancss = require(&quot;gulp-clean-css&quot;); //css压缩组件</span><br><span class="line">var uglify = require(&quot;gulp-uglify&quot;); //js压缩组件</span><br><span class="line">var htmlmin = require(&quot;gulp-htmlmin&quot;); //html压缩组件</span><br><span class="line">var htmlclean = require(&quot;gulp-htmlclean&quot;); //html清理组件</span><br><span class="line">var imagemin = require(&quot;gulp-imagemin&quot;); //图片压缩组件</span><br><span class="line">var changed = require(&quot;gulp-changed&quot;); //文件更改校验组件</span><br><span class="line">var gulpif = require(&quot;gulp-if&quot;); //任务 帮助调用组件</span><br><span class="line">var plumber = require(&quot;gulp-plumber&quot;); //容错组件（发生错误不跳出任务，并报出错误内容）</span><br><span class="line">var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><br><span class="line">var isDebug = true; //是否调试显示 编译通过的文件</span><br><span class="line">var gulpBabel = require(&quot;gulp-babel&quot;);</span><br><span class="line">var es2015Preset = require(&quot;babel-preset-es2015&quot;);</span><br><span class="line">var del = require(&quot;del&quot;);</span><br><span class="line">var Hexo = require(&quot;hexo&quot;);</span><br><span class="line">var hexo = new Hexo(process.cwd(), &#123;&#125;); // 初始化一个hexo对象</span><br><span class="line">  </span><br><span class="line">  // 清除public文件夹</span><br><span class="line">  gulp.task(&quot;clean&quot;, function () &#123;</span><br><span class="line">      return del([&quot;public/**/*&quot;]);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  // 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><br><span class="line">  // 创建静态页面 （等同 hexo generate）</span><br><span class="line">  gulp.task(&quot;generate&quot;, function () &#123;</span><br><span class="line">      return hexo.init().then(function () &#123;</span><br><span class="line">          return hexo</span><br><span class="line">              .call(&quot;generate&quot;, &#123;</span><br><span class="line">                  watch: false</span><br><span class="line">              &#125;)</span><br><span class="line">              .then(function () &#123;</span><br><span class="line">                  return hexo.exit();</span><br><span class="line">              &#125;)</span><br><span class="line">              .catch(function (err) &#123;</span><br><span class="line">                  return hexo.exit(err);</span><br><span class="line">              &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  // 启动Hexo服务器</span><br><span class="line">  gulp.task(&quot;server&quot;, function () &#123;</span><br><span class="line">      return hexo</span><br><span class="line">          .init()</span><br><span class="line">          .then(function () &#123;</span><br><span class="line">              return hexo.call(&quot;server&quot;, &#123;&#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(function (err) &#123;</span><br><span class="line">              console.log(err);</span><br><span class="line">          &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  // 部署到服务器</span><br><span class="line">  gulp.task(&quot;deploy&quot;, function () &#123;</span><br><span class="line">      return hexo.init().then(function () &#123;</span><br><span class="line">          return hexo</span><br><span class="line">              .call(&quot;deploy&quot;, &#123;</span><br><span class="line">                  watch: false</span><br><span class="line">              &#125;)</span><br><span class="line">              .then(function () &#123;</span><br><span class="line">                  return hexo.exit();</span><br><span class="line">              &#125;)</span><br><span class="line">              .catch(function (err) &#123;</span><br><span class="line">                  return hexo.exit(err);</span><br><span class="line">              &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  // 压缩public目录下的js文件</span><br><span class="line">  gulp.task(&quot;compressJs&quot;, function () &#123;</span><br><span class="line">      return gulp</span><br><span class="line">          .src([&quot;./public/**/*.js&quot;, &quot;!./public/libs/**&quot;]) //排除的js</span><br><span class="line">          .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;)))</span><br><span class="line">          .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress JS:&quot; &#125;)))</span><br><span class="line">          .pipe(plumber())</span><br><span class="line">          .pipe(</span><br><span class="line">              gulpBabel(&#123;</span><br><span class="line">                  presets: [es2015Preset] // es5检查机制</span><br><span class="line">              &#125;)</span><br><span class="line">          )</span><br><span class="line">          .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩</span><br><span class="line">          .pipe(gulp.dest(&quot;./public&quot;)); //输出到目标目录</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  // 压缩public目录下的css文件</span><br><span class="line">  gulp.task(&quot;compressCss&quot;, function () &#123;</span><br><span class="line">      var option = &#123;</span><br><span class="line">          rebase: false,</span><br><span class="line">          //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span><br><span class="line">          compatibility: &quot;ie7&quot; //保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span><br><span class="line">          //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]</span><br><span class="line">          //keepSpecialComments: &#x27;*&#x27; //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span><br><span class="line">      &#125;;</span><br><span class="line">      return gulp</span><br><span class="line">          .src([&quot;./public/**/*.css&quot;, &quot;!./public/**/*.min.css&quot;]) //排除的css</span><br><span class="line">          .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;)))</span><br><span class="line">          .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress CSS:&quot; &#125;)))</span><br><span class="line">          .pipe(plumber())</span><br><span class="line">          .pipe(cleancss(option))</span><br><span class="line">          .pipe(gulp.dest(&quot;./public&quot;));</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  // 压缩public目录下的html文件</span><br><span class="line">  gulp.task(&quot;compressHtml&quot;, function () &#123;</span><br><span class="line">      var cleanOptions = &#123;</span><br><span class="line">          protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g, //忽略处理</span><br><span class="line">          unprotect: /&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/gi //特殊处理</span><br><span class="line">      &#125;;</span><br><span class="line">      var minOption = &#123;</span><br><span class="line">          collapseWhitespace: true, //压缩HTML</span><br><span class="line">          collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">          removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">          removeScriptTypeAttributes: true, //删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br><span class="line">          removeStyleLinkTypeAttributes: true, //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span><br><span class="line">          removeComments: true, //清除HTML注释</span><br><span class="line">          minifyJS: true, //压缩页面JS</span><br><span class="line">          minifyCSS: true, //压缩页面CSS</span><br><span class="line">          minifyURLs: true //替换页面URL</span><br><span class="line">      &#125;;</span><br><span class="line">      return gulp</span><br><span class="line">          .src(&quot;./public/**/*.html&quot;)</span><br><span class="line">          .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress HTML:&quot; &#125;)))</span><br><span class="line">          .pipe(plumber())</span><br><span class="line">          .pipe(htmlclean(cleanOptions))</span><br><span class="line">          .pipe(htmlmin(minOption))</span><br><span class="line">          .pipe(gulp.dest(&quot;./public&quot;));</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  // 压缩 public/medias 目录内图片</span><br><span class="line">  gulp.task(&quot;compressImage&quot;, function () &#123;</span><br><span class="line">      var option = &#123;</span><br><span class="line">          optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）</span><br><span class="line">          progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">          interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">          multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">      &#125;;</span><br><span class="line">      return gulp</span><br><span class="line">          .src(&quot;./public/medias/**/*.*&quot;)</span><br><span class="line">          .pipe(gulpif(!isScriptAll, changed(&quot;./public/medias&quot;)))</span><br><span class="line">          .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress Images:&quot; &#125;)))</span><br><span class="line">          .pipe(plumber())</span><br><span class="line">          .pipe(imagemin(option))</span><br><span class="line">          .pipe(gulp.dest(&quot;./public&quot;));</span><br><span class="line">  &#125;);</span><br><span class="line">  // 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span><br><span class="line">  gulp.task(</span><br><span class="line">      &quot;build&quot;,</span><br><span class="line">      gulp.series(</span><br><span class="line">          &quot;clean&quot;,</span><br><span class="line">          &quot;generate&quot;,</span><br><span class="line">          &quot;compressHtml&quot;,</span><br><span class="line">          &quot;compressCss&quot;,</span><br><span class="line">          &quot;compressJs&quot;,</span><br><span class="line">          &quot;compressImage&quot;,</span><br><span class="line">          gulp.parallel(&quot;deploy&quot;)</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  // 默认任务</span><br><span class="line">  gulp.task(</span><br><span class="line">      &quot;default&quot;,</span><br><span class="line">      gulp.series(</span><br><span class="line">          &quot;clean&quot;,</span><br><span class="line">          &quot;generate&quot;,</span><br><span class="line">          gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressJs&quot;,&quot;compressImage&quot;)</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line">  //Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span><br></pre></td></tr></table></figure>

<ul>
<li><p>以后的执行方式有两种：</p>
<ol>
<li>直接在Hexo根目录执行 <code>gulp</code>或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li>
<li>在Hexo根目录执行 <code>gulp build</code> ，这个命令与第1种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li>
</ol>
</li>
<li><p>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 <code>&quot;compressImage&quot;,</code> 和第165行的 <code>,&quot;compressImage&quot;</code> 去掉即可</p>
</li>
</ul>
<h4 id="hexo-neat插件实现代码压缩"><a href="#hexo-neat插件实现代码压缩" class="headerlink" title="hexo-neat插件实现代码压缩"></a>hexo-neat插件实现代码压缩</h4><ul>
<li><p>可能以上方法比较复杂，来介绍个简单的，<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a>插件也是用来压缩代码的，底层也是通过gulp来实现的。</p>
</li>
<li><p>但是这个插件是有Bug的：</p>
<ul>
<li>压缩 md 文件会使 markdown 语法的代码块消失</li>
<li>会删除全角空格</li>
</ul>
</li>
<li><p>Hexo根目录执行安装代码：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure>

<ul>
<li>在Hexo配置文件<code>_config.yml</code> 末尾加入以下配置：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后直接 <code>hexo cl&amp;&amp;hexo g</code> 就可以了，会自动压缩文件 。</p>
</li>
<li><p><strong>补充</strong>：为了解决以上Bug，<strong>对于matery主题</strong>（其他主题自行解决）需要将以上默认配置修改为：</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.md&#x27;</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/**/instantpage.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/matery.js&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="全站CDN加速"><a href="#全站CDN加速" class="headerlink" title="全站CDN加速"></a>全站CDN加速</h3><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。</p>
<p><strong>用法：</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</span><br></pre></td></tr></table></figure>

<p><strong>例如：</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/jeremysvn/muyun/medias/loading.gif</span><br></pre></td></tr></table></figure>

<p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源</p>
<p>还可以配合<code>PicGo</code>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。</p>
<h3 id="向百度推送自己的资源"><a href="#向百度推送自己的资源" class="headerlink" title="向百度推送自己的资源"></a>向百度推送自己的资源</h3><h5 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h5><p><strong>安装sitemap插件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>这两个插件是用来生成 <code>Sitemap文件</code> 的插件，而 <code>Sitemap</code> 是用来告知搜索引擎我们的网站上有哪些可供抓取的网页的。</p>
<p><strong>注意一点：</strong></p>
<blockquote>
<p>hexo配置文件中的url一定要改成你的域名，这两个插件是根据你的url生成站点地图的。</p>
</blockquote>
<p>安装后直接执行<code>hexo cl&amp;&amp;hexo g</code>命令，然后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml文件</code>，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。</p>
<p>有<code>sitemap文件</code>之后，再将生成的<code>sitemap文件</code>提交给百度或者其他搜索引擎</p>
<p>百度方式：在自动提交的sitemap那里填写自己<code>sitemap文件</code>的URL地址即可</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure>

<h5 id="自动推送方式"><a href="#自动推送方式" class="headerlink" title="自动推送方式"></a>自动推送方式</h5><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line">    var bp = document.createElement(&#x27;script&#x27;);</span><br><span class="line">    var curProtocol = window.location.protocol.split(&#x27;:&#x27;)[0];</span><br><span class="line">    if (curProtocol === &#x27;https&#x27;) &#123;</span><br><span class="line">        bp.src = &#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        bp.src = &#x27;http://push.zhanzhang.baidu.com/push.js&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 百度搜索资源平台提交链接</span></span><br><span class="line"><span class="attr">baiduPush:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>即可！</p>
<p>其他主题一般都有这个功能的实现，如果没有的话，想办法在每个页面加入以上JS代码即可，原理是一样。</p>
<h5 id="主动推送方式"><a href="#主动推送方式" class="headerlink" title="主动推送方式"></a>主动推送方式</h5><p>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>

<p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-baidu-url-submit  百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">80</span> <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">blog.sky03.cn</span> <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">xxxxxxx</span> <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>

<p>密匙的获取是在百度的自动提交的主动推送那里。</p>
<p>再加入新的<code>deploy</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>

<p>这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。<br>推送成功时,会有如下终端提示!</p>
<p>一般来说，推送失败基本都是地址不相符造成的，我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p>
<h3 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt"></a>提交 robots.txt</h3><p><code>robots.txt</code> 是一种存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。</p>
<p>每个人站点目录可能不太一样，可以参考下我的 <code>robots.txt</code> 文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/posts/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/about/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/js/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/css/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/contact/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/fonts/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/friends/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/libs/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/medias/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/page/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/tags/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/categories/</span></span><br></pre></td></tr></table></figure>

<p>编写完以上内容再重新部署一下，然后到百度资源平台的<code>数据监控</code>-&gt;<code>Robots</code>点击<code>检测并更新</code> 看能不能检测到。</p>
<p>同样注意：刚添加的站点没有进行 <code>HTTPS认证</code>，直接检测有可能会报301错误。</p>
<h3 id="配置-Nofollow"><a href="#配置-Nofollow" class="headerlink" title="配置 Nofollow"></a>配置 Nofollow</h3><ul>
<li>nofollow 是HTML页面中 <code>a标签</code> 的 属性值。</li>
<li>这个属性的作用是：告诉搜索引擎的爬虫不要追踪该链接，为了对抗博客垃圾留言信息</li>
</ul>
<h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p>
<p><strong>方案一</strong>：</p>
<p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://baize.cc</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>

<p><strong>这个方式有个不好的地方：</strong></p>
<p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p>
<p><strong>方案二</strong>：</p>
<p>安装固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p>
<p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p>
<ol>
<li>Hexo根目录执行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>Hexo配置文件</code>末尾加入以下配置：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-abbrlink config 、固定文章地址插件</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">   <span class="attr">alg:</span> <span class="string">crc16</span>  <span class="comment">#算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点</span></span><br><span class="line">   <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>Hexo配置文件</code>中修改<code>permalink</code>如下：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://baize.cc</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>

<p>这样站点结构就变成了：<code>域名/posts/xxx.html</code></p>
]]></content>
      <categories>
        <category>网站优化</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 搭建开源个人网盘Nextcloud与常用插件</title>
    <url>/posts/e4ca.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文件服务器，是一个公司最常用的服务应用，每个公司企业基本都有自己的文件服务器实，现储存分享，上传下载文件文档等功能，常见的文件服务器就是ftp服务器，但是ftp服务器的功能实在有限，且对于普通用户使用入手难度较大，又缺乏界面，对于公司的普通用户来说，确实不是一个好的文件服务器。一般ftp也只是用户服务器，网站应用等方面。</p>
<p>在目前的公司企业环境中，企业网盘则是一个更好的文件服务器替代方案。百度云盘，相信大家基本都有用过吧，友好的界面交互，网页端，客户端都有，不需要任何命令，实现上传下载，分享等诸多功能。但是这种云盘毕竟不是自己的，很多公司对于将机密文件放在上面心存疑惑，且时不时的网盘关闭热潮也让人担心。既然如此，为何不搭建自己的网盘呢，于是就有了nextcloud。</p>
<p>对于私人网盘，市面上已经有很多的产品，很多开源半开源的云盘系统。其中最出名的就是 seafile和owncloud&#x2F;nextcloud。seafile是国人开发的，分块处理，断点上传，速度比后者要快。有社区版和企业版。社区版免费，但是功能有限，企业版要收费，功能更强大。但是社区版的功能，老实说只能满足个人使用，无法满足企业使用。而企业版要收费，费用根据公司人数不同，还需要发邮件询问。</p>
<p>像我着这种穷人，穷公司，人数不多，又不像花钱的，那么nextcloud就是最好的选择，nextcloud是owncloud的一个分支，由原创始人团队维护，是在owncloud被别的公司收购后，由创始人团队创立的新分支。就像 mysql和mariadb。nextcloud完全开源，功能强大，是外国人开发维护的。具体的与seafile等的对比，这里不详细说明了，有兴趣的百度就好。下面记录一下在centos7 服务器上搭建nextcloud的具体过程。</p>
<p> </p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>环境: centos8<br>nextcloud: 19.0.0 <br>selinux 关闭</p>
<ol>
<li>nextcloud是php项目，这里我使用nginx，官方文档是用apache的，有一点点具别。但不大。在下载nextcloud之前，先安装nginx和php</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先删除系统可能自带的PHP和nginx，用来面命令查找是否有安装</span></span><br><span class="line">$ rpm -qa |grep php</span><br><span class="line">$ rpm -qa |grep nginx</span><br><span class="line"><span class="comment"># 强制删除软件包，软件包全称就是上面通过rpm -qa 查询到的软件包全名</span></span><br><span class="line">$ rpm -e --nodeps &#123;软件包全称&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装yum的epel源，这里推荐用阿里云的镜像安装，包更全。</span></span><br><span class="line">$ rpm -ivh https://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">$ yum install -y nginx</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装php的源</span></span><br><span class="line">$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装php已经会用到扩展</span></span><br><span class="line">$ yum install -y php70w-devel php70w-pear php70w-pecl php70w-gd php70w-opcache php70w-cli php70w-pdo php70w-process php70w-pecl-apcu php70w-mcrypt php70w-mysql php70w-fpm php70w-pecl-memcached php70w-common php70w-xml php70w-mbstring php70w-pecl-igbinary</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/1.12.2</span><br><span class="line">$ php -v</span><br><span class="line">PHP 7.0.30 (cli) (built: Apr 28 2018 08:14:08) ( NTS )</span><br><span class="line">Copyright (c) 1997-2017 The PHP Group</span><br><span class="line">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.0.30, Copyright (c) 1999-2017, by Zend Technologies</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>nextcloud 还需要数据库，这里我使用的mysql，mysql提前安装好或使用已有的数据库服务器，具体安装安装方式可参考我另一篇博文: 《CentOS7.2 安装mysql，并配置自动启动和远程访问》。在mysql种创建一个新的databse用于nextcloud使用.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在装有mysql的服务器上执行</span></span><br><span class="line">$ mysql -u root -p</span><br><span class="line">&gt; create database nextcloud_db;</span><br><span class="line"><span class="comment"># 授权给自定义用户，这里以用户名：nextclouduser，密码：nextcloudpasswd，代替。</span></span><br><span class="line">&gt; grant all privileges on nextcloud_db.* to nextclouduser@localhost identified by <span class="string">&#x27;nextcloudpasswd&#x27;</span>;</span><br><span class="line">&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<p>3.  为nextcloud 生成自签名ssl证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx/cert/    <span class="comment"># 没有则创建此文件夹</span></span><br><span class="line">$ openssl req -new -x509 -days 365 -nodes -out /etc/nginx/cert/nextcloud.crt -keyout /etc/nginx/cert/nextcloud.key</span><br><span class="line"><span class="comment"># 会出现下面的选项需要填写，可以随便填。</span></span><br><span class="line">Country Name (2 letter code) [XX]:cn                                 <span class="comment"># 国家</span></span><br><span class="line">State or Province Name (full name) []:guangdong                      <span class="comment"># 省份</span></span><br><span class="line">Locality Name (eg, city) [Default City]:guangzhou                    <span class="comment"># 地区名字</span></span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:Amos           <span class="comment"># 公司名</span></span><br><span class="line">Organizational Unit Name (eg, section) []:Technology                 <span class="comment"># 部门</span></span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:Amos        # CA主机名</span></span><br><span class="line"><span class="string">Email Address []:Amos@Amos.com                                       # Email地址</span></span><br><span class="line"><span class="string"># 修改证书和文件夹权限</span></span><br><span class="line"><span class="string">$ chmod 600 /etc/nginx/cert/*</span></span><br><span class="line"><span class="string">$ chmod 700 /etc/nginx/cert</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>下载nextcloud，并配置php和nginx</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载nextcloud，官网地址为: https://nextcloud.com/install/#instructions-server</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/src</span><br><span class="line">$ yum install -y wget unzip</span><br><span class="line">$ wget https://download.nextcloud.com/server/releases/nextcloud-13.0.2.zip    <span class="comment"># 下载</span></span><br><span class="line">$ unzip nextcloud-13.0.2.zip    <span class="comment"># 解压</span></span><br><span class="line">$ <span class="built_in">mv</span> nextcloud /usr/share/nginx/html/    <span class="comment"># 移动到指定文件夹内</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/nginx/html/nextcloud     <span class="comment"># 进行nextcloud 目录中</span></span><br><span class="line">$ <span class="built_in">mkdir</span> data    <span class="comment"># 创建数据文件夹</span></span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx -R nextcloud/    <span class="comment"># 将nextcloud文件授权给nginx</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置php-fpm</span></span><br><span class="line">$ vim /etc/php-fpm.d/www.conf</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">user = nginx                                   //将用户和组都改为nginx</span><br><span class="line">group = nginx</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"><span class="built_in">env</span>[HOSTNAME] = <span class="variable">$HOSTNAME</span>                     //将以下几行，去掉注释</span><br><span class="line"><span class="built_in">env</span>[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line"><span class="built_in">env</span>[TMP] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TMPDIR] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TEMP] = /tmp</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 为php创建session文件夹</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /var/lib/php/session</span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx -R /var/lib/php/session/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置nginx</span></span><br><span class="line">$ <span class="built_in">cd</span> /etc/nginx/conf.d/</span><br><span class="line">$ vim nextcloud.conf</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">upstream php-handler &#123;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">    <span class="comment">#server unix:/var/run/php5-fpm.sock;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    <span class="comment"># enforce https</span></span><br><span class="line">    rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name localhost;</span><br><span class="line"> </span><br><span class="line">    ssl_certificate /etc/nginx/cert/nextcloud.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/cert/nextcloud.key;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Add headers to serve security related headers</span></span><br><span class="line">    <span class="comment"># Before enabling Strict-Transport-Security headers please read into this</span></span><br><span class="line">    <span class="comment"># topic first.</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000;</span></span><br><span class="line"><span class="string">    includeSubDomains; preload;&quot;</span>;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">    add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    add_header X-Robots-Tag none;</span><br><span class="line">    add_header X-Download-Options noopen;</span><br><span class="line">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Path to the root of your installation</span></span><br><span class="line">    root /usr/share/nginx/html/nextcloud/;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class="line">    <span class="comment"># Uncomment it if you&#x27;re planning to use this app.</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json</span></span><br><span class="line">    <span class="comment"># last;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location = /.well-known/carddav &#123;</span><br><span class="line">      <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://<span class="variable">$host</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/caldav &#123;</span><br><span class="line">      <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://<span class="variable">$host</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># set max upload size</span></span><br><span class="line">    client_max_body_size 10240M;    <span class="comment"># 上传文件最大限制，php.ini中也要修改，最后优化时会提及。</span></span><br><span class="line">    fastcgi_buffers 64 4K;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Disable gzip to avoid the removal of the ETag header</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_comp_level 4;</span><br><span class="line">    gzip_min_length 256;</span><br><span class="line">    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;</span><br><span class="line">    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class="line">    <span class="comment"># This module is currently not supported.</span></span><br><span class="line">    <span class="comment">#pagespeed off;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    error_page 403 /core/templates/403.php;</span><br><span class="line">    error_page 404 /core/templates/404.php;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^ /index.php<span class="variable">$uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.*)$;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        fastcgi_param PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param HTTPS on;</span><br><span class="line">        <span class="comment">#Avoid sending the security headers twice</span></span><br><span class="line">        fastcgi_param modHeadersAvailable <span class="literal">true</span>;</span><br><span class="line">        fastcgi_param front_controller_active <span class="literal">true</span>;</span><br><span class="line">        fastcgi_pass php-handler;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_request_buffering off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span>/ =404;</span><br><span class="line">        index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Adding the cache control header for js and css files</span></span><br><span class="line">    <span class="comment"># Make sure it is BELOW the PHP block</span></span><br><span class="line">    location ~* \.(?:css|js)$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php$uri$is_args<span class="variable">$args</span>;</span><br><span class="line">        add_header Cache-Control <span class="string">&quot;public, max-age=7200&quot;</span>;</span><br><span class="line">        <span class="comment"># Add headers to serve security related headers (It is intended to</span></span><br><span class="line">        <span class="comment"># have those duplicated to the ones above)</span></span><br><span class="line">        <span class="comment"># Before enabling Strict-Transport-Security headers please read into</span></span><br><span class="line">        <span class="comment"># this topic first.</span></span><br><span class="line">        add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000;includeSubDomains; preload;&quot;</span>;</span><br><span class="line">        add_header X-Content-Type-Options nosniff;</span><br><span class="line">        add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">        add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        add_header X-Robots-Tag none;</span><br><span class="line">        add_header X-Download-Options noopen;</span><br><span class="line">        add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php$uri$is_args<span class="variable">$args</span>;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to other assets</span></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将nginx原配置中80端口的配置删除</span></span><br><span class="line">$ vim /etc/nginx/nginx.conf</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">server &#123;          <span class="comment"># 将80端口的server整个删除，应该我们在上面nextcloud.conf中已经配置了，这里不删除的话会导致冲突不生效。</span></span><br><span class="line">    listen 80;</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br><span class="line">--------------------------------------------------------</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>启动nginx和php-fpm</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nginx -t    <span class="comment"># 检查nginx配置是否正确，出现下面输入则正确。</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动并设为开机启动 nginx，php-fpm</span></span><br><span class="line">$ systemctl start nginx</span><br><span class="line">$ systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">$ systemctl start php-fpm</span><br><span class="line">$ systemctl <span class="built_in">enable</span> php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置防火墙，开放http和https的端口。</span></span><br><span class="line">$ firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">$ firewall-cmd --add-port=443/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>PS： 这里我的selinux是关闭的，如果selinux没有关闭，则执行下面命令关闭selinux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ setenforce 0    <span class="comment"># 关闭selinux</span></span><br><span class="line">$ vim /etc/selinux/config    <span class="comment"># 修改配置，永久关闭。</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line">SELINUX=disabled</span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>访问网页界面，完成安装。访问搭建nextcloud服务器的ip地址。（如果有域名就访问域名）<br>按照实际情况进行配置，配置完成后，点击安装完成。上图中mysql的主机名，使用上面我们自己的数据库服务器地址和端口</li>
</ol>
<p>7. 性能优化，进入主界面后，右上角自己头像，点击设置，基本设置：<br>第一项就有 安全及设置警告，这里会有配置错误提示，优化提示等。根据提示进行优化：<br>① 修改php.ini 文件，添加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/php.ini</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">[PHP]    <span class="comment"># 在[PHP] 以下添加如下配置</span></span><br><span class="line">opcache.enable=1</span><br><span class="line">opcache.enable_cli=1</span><br><span class="line">opcache.interned_strings_buffer=8</span><br><span class="line">opcache.max_accelerated_files=10000</span><br><span class="line">opcache.memory_consumption=128</span><br><span class="line">opcache.save_comments=1</span><br><span class="line">opcache.revalidate_freq=1</span><br><span class="line">...</span><br><span class="line">upload_max_filesize = 10240M    <span class="comment"># 上传文件最大大小，可以自定义修改，默认为512M</span></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line">$ vim /etc/nginx/nginx.d/nextcloud.conf</span><br></pre></td></tr></table></figure>

<p>② 设置缓存后端，可以使用redis，memcache。单机或集群模式都可以。不同的配置方式可以参考官方文档。</p>
<p>这里我直接单机安装并配置使用memcache。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y memcache</span><br><span class="line">$ vim /etc/sysconfig/memcached</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">PORT=<span class="string">&quot;11211&quot;</span>    <span class="comment"># 端口</span></span><br><span class="line">USER=<span class="string">&quot;memcached&quot;</span>    <span class="comment"># 用户</span></span><br><span class="line">MAXCONN=<span class="string">&quot;1024&quot;</span>    <span class="comment"># 最大链接数</span></span><br><span class="line">CACHESIZE=<span class="string">&quot;2048&quot;</span>    <span class="comment"># 最大内存，单位M</span></span><br><span class="line">OPTIONS=<span class="string">&quot;&quot;</span></span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改nextcloud的config配置文件，添加memcached缓存配置</span></span><br><span class="line">$ vim /usr/share/nginx/html/nextcloud/config/config.php</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\APCu&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Memcached&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcached_servers&#x27;</span> =&gt; array(</span><br><span class="line">   array(<span class="string">&#x27;localhost&#x27;</span>, 11211),</span><br><span class="line">     ),</span><br><span class="line">-----------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>③ 重启nginx和php-fpm，是配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start memcached</span><br><span class="line">$ systemctl <span class="built_in">enable</span> memcached</span><br><span class="line">$ systemctl restart nginx</span><br><span class="line">$ systemctl restart php-fpm</span><br></pre></td></tr></table></figure>

<p>④ 设置后台任务，cron执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/crontab    <span class="comment"># 修改cron配置文件，添加如下配置</span></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">*/15 * * * * -u nginx /usr/bin/php -f /usr/share/nginx/html/nextcloud/cron.php</span><br><span class="line">---------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>配置邮件服务器</li>
</ol>
<p>在设置 –&gt; 其他设置 中，配置smtp服务器。并进行测试，收到邮件则为OK。</p>
<ol start="9">
<li>到此，nextcloud已经安装完成。除此之外，nextcloud还有很多常用插件，用于拓展功能，包括官方的或个人的，点击右上角个人头像–&gt;应用</li>
</ol>
<p>在这里可以直接点击安装启动应用。非常方便。本身安装时便会自带有一些应用，这里推荐几个需要手动安装的常用应用：</p>
<p>①Announcement center  管理员可以发公告</p>
<p>②Circles 圈子，每个人都可以建立加入圈子，实现圈子的文件共享</p>
<p>③Group folders 组文件夹</p>
<p>④File access control 文件访问控制</p>
<p>⑤Impersonate 管理员可以模拟用户，可以以用户登陆到他们的网盘，可以看到个人用户的文件，这个有点不太隐私。</p>
<p>。。。</p>
<p>当然，还有很多有趣的应用，等你自己去发现。</p>
<p>OK，到此，nextcloud的搭建已经完成。自己去不断使用，不断探索功能吧。</p>
<p> </p>
<p>PS：在设置中还会一直有一些报错，虽然按照要求进行配置了，却还是报错，这就在暂且忽略掉吧</p>
]]></content>
      <categories>
        <category>NextCloud</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>NextCloud</tag>
      </tags>
  </entry>
</search>
